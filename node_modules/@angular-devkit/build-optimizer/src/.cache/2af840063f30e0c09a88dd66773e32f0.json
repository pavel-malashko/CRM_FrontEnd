{"remainingRequest":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@angular\\material\\esm5\\select.es5.js","dependencies":[{"path":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@angular\\material\\esm5\\select.es5.js","mtime":499162500000},{"path":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** PURE_IMPORTS_START _angular_animations,tslib,_angular_cdk_a11y,_angular_cdk_bidi,_angular_cdk_coercion,_angular_cdk_collections,_angular_cdk_keycodes,_angular_cdk_overlay,_angular_cdk_scrolling,_angular_core,_angular_forms,_angular_material_core,_angular_material_form_field,rxjs,rxjs_operators,_angular_common PURE_IMPORTS_END */\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { __extends } from 'tslib';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { A, DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\nimport { CdkConnectedOverlay, Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, Inject, InjectionToken, Input, isDevMode, NgZone, Optional, Output, Self, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { _countGroupLabelsBeforeOption, _getOptionScrollPosition, ErrorStateMatcher, MAT_OPTION_PARENT_COMPONENT, MatOptgroup, MatOption, mixinDisabled, mixinDisableRipple, mixinErrorState, mixinTabIndex, MatCommonModule, MatOptionModule } from '@angular/material/core';\nimport { MatFormField, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { defer, merge, Subject } from 'rxjs';\nimport { distinctUntilChanged, filter, map, startWith, switchMap, take, takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * \\@docs-private\n  @type {?} */\nvar matSelectAnimations = {\n    /**\n       * This animation transforms the select's overlay panel on and off the page.\n       *\n       * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n       * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n       * side to ensure the option text correctly overlaps the trigger text.\n       *\n       * When the panel is removed from the DOM, it simply fades out linearly.\n       */\n    transformPanel: /*@__PURE__*/ trigger('transformPanel', [\n        /*@__PURE__*/ state('void', /*@__PURE__*/ style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        /*@__PURE__*/ state('showing', /*@__PURE__*/ style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            // 32px = 2 * 16px padding\n            transform: 'scaleY(1)'\n        })),\n        /*@__PURE__*/ state('showing-multiple', /*@__PURE__*/ style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            // 64px = 48px padding on the left + 16px padding on the right\n            transform: 'scaleY(1)'\n        })),\n        /*@__PURE__*/ transition('void => *', /*@__PURE__*/ animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        /*@__PURE__*/ transition('* => void', /*@__PURE__*/ animate('100ms 25ms linear', /*@__PURE__*/ style({ opacity: 0 })))\n    ]),\n    /**\n       * This animation fades in the background color and text content of the\n       * select's options. It is time delayed to occur 100ms after the overlay\n       * panel has transformed in.\n       * @deprecated Not used anymore. To be removed.\n       * @breaking-change 8.0.0\n       */\n    fadeInContent: /*@__PURE__*/ trigger('fadeInContent', [\n        /*@__PURE__*/ state('showing', /*@__PURE__*/ style({ opacity: 1 })),\n        /*@__PURE__*/ transition('void => showing', [\n            /*@__PURE__*/ style({ opacity: 0 }),\n            /*@__PURE__*/ animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n/** *\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n  @type {?} */\nvar transformPanel = matSelectAnimations.transformPanel;\n/** *\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n  @type {?} */\nvar fadeInContent = matSelectAnimations.fadeInContent;\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n * @return {?}\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar nextUniqueId = 0;\n/** *\n * The max height of the select's overlay panel\n  @type {?} */\nvar SELECT_PANEL_MAX_HEIGHT = 256;\n/** *\n * The panel's padding on the x-axis\n  @type {?} */\nvar SELECT_PANEL_PADDING_X = 16;\n/** *\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n  @type {?} */\nvar SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** *\n * The height of the select items in `em` units.\n  @type {?} */\nvar SELECT_ITEM_HEIGHT_EM = 3;\n/** *\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n  @type {?} */\nvar SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n/** *\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n  @type {?} */\nvar SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** *\n * Injection token that determines the scroll handling while a select is open.\n  @type {?} */\nvar MAT_SELECT_SCROLL_STRATEGY = /*@__PURE__*/ new InjectionToken('mat-select-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return function () { return overlay.scrollStrategies.reposition(); };\n}\n/** *\n * \\@docs-private\n  @type {?} */\nvar MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Change event object that is emitted when the select value has changed.\n */\nvar /**\n * Change event object that is emitted when the select value has changed.\n */ MatSelectChange = /** @class */ /*@__PURE__*/ (function () {\n    function MatSelectChange(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n    return MatSelectChange;\n}());\n/**\n * \\@docs-private\n */\nvar /**\n * \\@docs-private\n */ MatSelectBase = /** @class */ /*@__PURE__*/ (function () {\n    function MatSelectBase(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n    return MatSelectBase;\n}());\n/** @type {?} */\nvar _MatSelectMixinBase = /*@__PURE__*/ mixinDisableRipple(/*@__PURE__*/ mixinTabIndex(/*@__PURE__*/ mixinDisabled(/*@__PURE__*/ mixinErrorState(MatSelectBase))));\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nvar MatSelectTrigger = /** @class */ /*@__PURE__*/ (function () {\n    function MatSelectTrigger() {\n    }\n    return MatSelectTrigger;\n}());\nvar MatSelect = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(MatSelect, _super);\n    function MatSelect(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory) {\n        var _this = _super.call(this, elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) || this;\n        _this._viewportRuler = _viewportRuler;\n        _this._changeDetectorRef = _changeDetectorRef;\n        _this._ngZone = _ngZone;\n        _this._dir = _dir;\n        _this._parentFormField = _parentFormField;\n        _this.ngControl = ngControl;\n        /**\n         * Whether or not the overlay panel is open.\n         */\n        _this._panelOpen = false;\n        /**\n         * Whether filling out the select is required in the form.\n         */\n        _this._required = false;\n        /**\n         * The scroll position of the overlay panel, calculated to center the selected option.\n         */\n        _this._scrollTop = 0;\n        /**\n         * Whether the component is in multiple selection mode.\n         */\n        _this._multiple = false;\n        /**\n         * Comparison function to specify which option is displayed. Defaults to object equality.\n         */\n        _this._compareWith = function (o1, o2) { return o1 === o2; };\n        /**\n         * Unique id for this input.\n         */\n        _this._uid = \"mat-select-\" + nextUniqueId++;\n        /**\n         * Emits whenever the component is destroyed.\n         */\n        _this._destroy = new Subject();\n        /**\n         * The cached font-size of the trigger element.\n         */\n        _this._triggerFontSize = 0;\n        /**\n         * `View -> model callback called when value changes`\n         */\n        _this._onChange = function () { };\n        /**\n         * `View -> model callback called when select has been touched`\n         */\n        _this._onTouched = function () { };\n        /**\n         * The IDs of child options to be passed to the aria-owns attribute.\n         */\n        _this._optionIds = '';\n        /**\n         * The value of the select panel's transform-origin property.\n         */\n        _this._transformOrigin = 'top';\n        /**\n         * Emits when the panel element is finished transforming in.\n         */\n        _this._panelDoneAnimatingStream = new Subject();\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        _this._offsetY = 0;\n        /**\n         * This position config ensures that the top \"start\" corner of the overlay\n         * is aligned with with the top \"start\" of the origin by default (overlapping\n         * the trigger completely). If the panel cannot fit below the trigger, it\n         * will fall back to a position above the trigger.\n         */\n        _this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n        /**\n         * Whether the component is disabling centering of the active option over the trigger.\n         */\n        _this._disableOptionCentering = false;\n        _this._focused = false;\n        /**\n         * A name for this control that can be used by `mat-form-field`.\n         */\n        _this.controlType = 'mat-select';\n        /**\n         * Aria label of the select. If not specified, the placeholder will be used as label.\n         */\n        _this.ariaLabel = '';\n        /**\n         * Combined stream of all of the child options' change events.\n         */\n        _this.optionSelectionChanges = defer(function () {\n            if (_this.options) {\n                return merge.apply(void 0, _this.options.map(function (option) { return option.onSelectionChange; }));\n            }\n            return _this._ngZone.onStable\n                .asObservable()\n                .pipe(take(1), switchMap(function () { return _this.optionSelectionChanges; }));\n        });\n        /**\n         * Event emitted when the select panel has been toggled.\n         */\n        _this.openedChange = new EventEmitter();\n        /**\n         * Event emitted when the select has been opened.\n         */\n        _this._openedStream = _this.openedChange.pipe(filter(function (o) { return o; }), map(function () { }));\n        /**\n         * Event emitted when the select has been closed.\n         */\n        _this._closedStream = _this.openedChange.pipe(filter(function (o) { return !o; }), map(function () { }));\n        /**\n         * Event emitted when the selected value has been changed by the user.\n         */\n        _this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * \\@docs-private\n         */\n        _this.valueChange = new EventEmitter();\n        if (_this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            _this.ngControl.valueAccessor = _this;\n        }\n        _this._scrollStrategyFactory = scrollStrategyFactory;\n        _this._scrollStrategy = _this._scrollStrategyFactory();\n        _this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        _this.id = _this.id;\n        return _this;\n    }\n    Object.defineProperty(MatSelect.prototype, \"focused\", {\n        /** Whether the select is focused. */\n        get: /**\n         * Whether the select is focused.\n         * @return {?}\n         */ function () {\n            return this._focused || this._panelOpen;\n        },\n        /**\n         * @deprecated Setter to be removed as this property is intended to be readonly.\n         * @breaking-change 8.0.0\n         */\n        set: /**\n         * @deprecated Setter to be removed as this property is intended to be readonly.\n         * \\@breaking-change 8.0.0\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._focused = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSelect.prototype, \"placeholder\", {\n        /** Placeholder to be shown if no value has been selected. */\n        get: /**\n         * Placeholder to be shown if no value has been selected.\n         * @return {?}\n         */ function () { return this._placeholder; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._placeholder = value;\n            this.stateChanges.next();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSelect.prototype, \"required\", {\n        /** Whether the component is required. */\n        get: /**\n         * Whether the component is required.\n         * @return {?}\n         */ function () { return this._required; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._required = coerceBooleanProperty(value);\n            this.stateChanges.next();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSelect.prototype, \"multiple\", {\n        /** Whether the user should be allowed to select multiple options. */\n        get: /**\n         * Whether the user should be allowed to select multiple options.\n         * @return {?}\n         */ function () { return this._multiple; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (this._selectionModel) {\n                throw getMatSelectDynamicMultipleError();\n            }\n            this._multiple = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSelect.prototype, \"disableOptionCentering\", {\n        /** Whether to center the active option over the trigger. */\n        get: /**\n         * Whether to center the active option over the trigger.\n         * @return {?}\n         */ function () { return this._disableOptionCentering; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._disableOptionCentering = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSelect.prototype, \"compareWith\", {\n        /**\n         * Function to compare the option values with the selected values. The first argument\n         * is a value from an option. The second is a value from the selection. A boolean\n         * should be returned.\n         */\n        get: /**\n         * Function to compare the option values with the selected values. The first argument\n         * is a value from an option. The second is a value from the selection. A boolean\n         * should be returned.\n         * @return {?}\n         */ function () { return this._compareWith; },\n        set: /**\n         * @param {?} fn\n         * @return {?}\n         */ function (fn) {\n            if (typeof fn !== 'function') {\n                throw getMatSelectNonFunctionValueError();\n            }\n            this._compareWith = fn;\n            if (this._selectionModel) {\n                // A different comparator means the selection could change.\n                this._initializeSelection();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSelect.prototype, \"value\", {\n        /** Value of the select control. */\n        get: /**\n         * Value of the select control.\n         * @return {?}\n         */ function () { return this._value; },\n        set: /**\n         * @param {?} newValue\n         * @return {?}\n         */ function (newValue) {\n            if (newValue !== this._value) {\n                this.writeValue(newValue);\n                this._value = newValue;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSelect.prototype, \"id\", {\n        /** Unique id of the element. */\n        get: /**\n         * Unique id of the element.\n         * @return {?}\n         */ function () { return this._id; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._id = value || this._uid;\n            this.stateChanges.next();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatSelect.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this._selectionModel = new SelectionModel(this.multiple);\n            this.stateChanges.next();\n            // We need `distinctUntilChanged` here, because some browsers will\n            // fire the animation end event twice for the same animation. See:\n            // https://github.com/angular/angular/issues/24084\n            this._panelDoneAnimatingStream\n                .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n                .subscribe(function () {\n                if (_this.panelOpen) {\n                    _this._scrollTop = 0;\n                    _this.openedChange.emit(true);\n                }\n                else {\n                    _this.openedChange.emit(false);\n                    _this.overlayDir.offsetX = 0;\n                    _this._changeDetectorRef.markForCheck();\n                }\n            });\n        };\n    /**\n     * @return {?}\n     */\n    MatSelect.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this._initKeyManager();\n            this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(function (event) {\n                event.added.forEach(function (option) { return option.select(); });\n                event.removed.forEach(function (option) { return option.deselect(); });\n            });\n            this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(function () {\n                _this._resetOptions();\n                _this._initializeSelection();\n            });\n        };\n    /**\n     * @return {?}\n     */\n    MatSelect.prototype.ngDoCheck = /**\n     * @return {?}\n     */\n        function () {\n            if (this.ngControl) {\n                this.updateErrorState();\n            }\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MatSelect.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n            // the parent form field know to run change detection when the disabled state changes.\n            if (changes[\"disabled\"]) {\n                this.stateChanges.next();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    MatSelect.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this._destroy.next();\n            this._destroy.complete();\n            this.stateChanges.complete();\n        };\n    /** Toggles the overlay panel open or closed. */\n    /**\n     * Toggles the overlay panel open or closed.\n     * @return {?}\n     */\n    MatSelect.prototype.toggle = /**\n     * Toggles the overlay panel open or closed.\n     * @return {?}\n     */\n        function () {\n            this.panelOpen ? this.close() : this.open();\n        };\n    /** Opens the overlay panel. */\n    /**\n     * Opens the overlay panel.\n     * @return {?}\n     */\n    MatSelect.prototype.open = /**\n     * Opens the overlay panel.\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n                return;\n            }\n            this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n            // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n            // `parseInt` ignores the trailing 'px' and converts this to a number.\n            this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n            this._panelOpen = true;\n            this._keyManager.withHorizontalOrientation(null);\n            this._calculateOverlayPosition();\n            this._highlightCorrectOption();\n            this._changeDetectorRef.markForCheck();\n            // Set the font size on the panel element once it exists.\n            this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {\n                if (_this._triggerFontSize && _this.overlayDir.overlayRef &&\n                    _this.overlayDir.overlayRef.overlayElement) {\n                    _this.overlayDir.overlayRef.overlayElement.style.fontSize = _this._triggerFontSize + \"px\";\n                }\n            });\n        };\n    /** Closes the overlay panel and focuses the host element. */\n    /**\n     * Closes the overlay panel and focuses the host element.\n     * @return {?}\n     */\n    MatSelect.prototype.close = /**\n     * Closes the overlay panel and focuses the host element.\n     * @return {?}\n     */\n        function () {\n            if (this._panelOpen) {\n                this._panelOpen = false;\n                this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n                this._changeDetectorRef.markForCheck();\n                this._onTouched();\n            }\n        };\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} value New value to be written to the model.\n     * @return {?}\n     */\n    MatSelect.prototype.writeValue = /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} value New value to be written to the model.\n     * @return {?}\n     */\n        function (value) {\n            if (this.options) {\n                this._setSelectionByValue(value);\n            }\n        };\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the value changes.\n     * @return {?}\n     */\n    MatSelect.prototype.registerOnChange = /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the value changes.\n     * @return {?}\n     */\n        function (fn) {\n            this._onChange = fn;\n        };\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the component has been touched.\n     * @return {?}\n     */\n    MatSelect.prototype.registerOnTouched = /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the component has been touched.\n     * @return {?}\n     */\n        function (fn) {\n            this._onTouched = fn;\n        };\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} isDisabled Sets whether the component is disabled.\n     * @return {?}\n     */\n    MatSelect.prototype.setDisabledState = /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} isDisabled Sets whether the component is disabled.\n     * @return {?}\n     */\n        function (isDisabled) {\n            this.disabled = isDisabled;\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        };\n    Object.defineProperty(MatSelect.prototype, \"panelOpen\", {\n        /** Whether or not the overlay panel is open. */\n        get: /**\n         * Whether or not the overlay panel is open.\n         * @return {?}\n         */ function () {\n            return this._panelOpen;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSelect.prototype, \"selected\", {\n        /** The currently selected option. */\n        get: /**\n         * The currently selected option.\n         * @return {?}\n         */ function () {\n            return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSelect.prototype, \"triggerValue\", {\n        /** The value displayed in the trigger. */\n        get: /**\n         * The value displayed in the trigger.\n         * @return {?}\n         */ function () {\n            if (this.empty) {\n                return '';\n            }\n            if (this._multiple) {\n                /** @type {?} */\n                var selectedOptions = this._selectionModel.selected.map(function (option) { return option.viewValue; });\n                if (this._isRtl()) {\n                    selectedOptions.reverse();\n                }\n                // TODO(crisbeto): delimiter should be configurable for proper localization.\n                return selectedOptions.join(', ');\n            }\n            return this._selectionModel.selected[0].viewValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Whether the element is in RTL mode. */\n    /**\n     * Whether the element is in RTL mode.\n     * @return {?}\n     */\n    MatSelect.prototype._isRtl = /**\n     * Whether the element is in RTL mode.\n     * @return {?}\n     */\n        function () {\n            return this._dir ? this._dir.value === 'rtl' : false;\n        };\n    /** Handles all keydown events on the select. */\n    /**\n     * Handles all keydown events on the select.\n     * @param {?} event\n     * @return {?}\n     */\n    MatSelect.prototype._handleKeydown = /**\n     * Handles all keydown events on the select.\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            if (!this.disabled) {\n                this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n            }\n        };\n    /**\n     * Handles keyboard events while the select is closed.\n     * @param {?} event\n     * @return {?}\n     */\n    MatSelect.prototype._handleClosedKeydown = /**\n     * Handles keyboard events while the select is closed.\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            /** @type {?} */\n            var keyCode = event.keyCode;\n            /** @type {?} */\n            var isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n            /** @type {?} */\n            var isOpenKey = keyCode === ENTER || keyCode === SPACE;\n            /** @type {?} */\n            var manager = this._keyManager;\n            // Open the select on ALT + arrow key to match the native <select>\n            if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n                event.preventDefault(); // prevents the page from scrolling down when pressing space\n                this.open();\n            }\n            else if (!this.multiple) {\n                if (keyCode === HOME || keyCode === END) {\n                    keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n                    event.preventDefault();\n                }\n                else {\n                    manager.onKeydown(event);\n                }\n            }\n        };\n    /**\n     * Handles keyboard events when the selected is open.\n     * @param {?} event\n     * @return {?}\n     */\n    MatSelect.prototype._handleOpenKeydown = /**\n     * Handles keyboard events when the selected is open.\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            /** @type {?} */\n            var keyCode = event.keyCode;\n            /** @type {?} */\n            var isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n            /** @type {?} */\n            var manager = this._keyManager;\n            if (keyCode === HOME || keyCode === END) {\n                event.preventDefault();\n                keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n            }\n            else if (isArrowKey && event.altKey) {\n                // Close the select on ALT + arrow key to match the native <select>\n                event.preventDefault();\n                this.close();\n            }\n            else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n                event.preventDefault();\n                manager.activeItem._selectViaInteraction();\n            }\n            else if (this._multiple && keyCode === A && event.ctrlKey) {\n                event.preventDefault();\n                /** @type {?} */\n                var hasDeselectedOptions_1 = this.options.some(function (opt) { return !opt.disabled && !opt.selected; });\n                this.options.forEach(function (option) {\n                    if (!option.disabled) {\n                        hasDeselectedOptions_1 ? option.select() : option.deselect();\n                    }\n                });\n            }\n            else {\n                /** @type {?} */\n                var previouslyFocusedIndex = manager.activeItemIndex;\n                manager.onKeydown(event);\n                if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                    manager.activeItemIndex !== previouslyFocusedIndex) {\n                    manager.activeItem._selectViaInteraction();\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    MatSelect.prototype._onFocus = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.disabled) {\n                this._focused = true;\n                this.stateChanges.next();\n            }\n        };\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     * @return {?}\n     */\n    MatSelect.prototype._onBlur = /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     * @return {?}\n     */\n        function () {\n            this._focused = false;\n            if (!this.disabled && !this.panelOpen) {\n                this._onTouched();\n                this._changeDetectorRef.markForCheck();\n                this.stateChanges.next();\n            }\n        };\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     * @return {?}\n     */\n    MatSelect.prototype._onAttached = /**\n     * Callback that is invoked when the overlay panel has been attached.\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.overlayDir.positionChange.pipe(take(1)).subscribe(function () {\n                _this._setPseudoCheckboxPaddingSize();\n                _this._changeDetectorRef.detectChanges();\n                _this._calculateOverlayOffsetX();\n                _this.panel.nativeElement.scrollTop = _this._scrollTop;\n            });\n        };\n    /** Returns the theme to be used on the panel. */\n    /**\n     * Returns the theme to be used on the panel.\n     * @return {?}\n     */\n    MatSelect.prototype._getPanelTheme = /**\n     * Returns the theme to be used on the panel.\n     * @return {?}\n     */\n        function () {\n            return this._parentFormField ? \"mat-\" + this._parentFormField.color : '';\n        };\n    /**\n     * Sets the pseudo checkbox padding size based on the width of the pseudo checkbox.\n     * @return {?}\n     */\n    MatSelect.prototype._setPseudoCheckboxPaddingSize = /**\n     * Sets the pseudo checkbox padding size based on the width of the pseudo checkbox.\n     * @return {?}\n     */\n        function () {\n            if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n                /** @type {?} */\n                var pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n                if (pseudoCheckbox) {\n                    SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n                }\n            }\n        };\n    Object.defineProperty(MatSelect.prototype, \"empty\", {\n        /** Whether the select has a value. */\n        get: /**\n         * Whether the select has a value.\n         * @return {?}\n         */ function () {\n            return !this._selectionModel || this._selectionModel.isEmpty();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatSelect.prototype._initializeSelection = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            // Defer setting the value in order to avoid the \"Expression\n            // has changed after it was checked\" errors from Angular.\n            Promise.resolve().then(function () {\n                _this._setSelectionByValue(_this.ngControl ? _this.ngControl.value : _this._value);\n            });\n        };\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     * @param {?} value\n     * @return {?}\n     */\n    MatSelect.prototype._setSelectionByValue = /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            var _this = this;\n            if (this.multiple && value) {\n                if (!Array.isArray(value)) {\n                    throw getMatSelectNonArrayValueError();\n                }\n                this._selectionModel.clear();\n                value.forEach(function (currentValue) { return _this._selectValue(currentValue); });\n                this._sortValues();\n            }\n            else {\n                this._selectionModel.clear();\n                /** @type {?} */\n                var correspondingOption = this._selectValue(value);\n                // Shift focus to the active item. Note that we shouldn't do this in multiple\n                // mode, because we don't know what option the user interacted with last.\n                if (correspondingOption) {\n                    this._keyManager.setActiveItem(correspondingOption);\n                }\n            }\n            this._changeDetectorRef.markForCheck();\n        };\n    /**\n     * Finds and selects and option based on its value.\n     * @param {?} value\n     * @return {?} Option that has the corresponding value.\n     */\n    MatSelect.prototype._selectValue = /**\n     * Finds and selects and option based on its value.\n     * @param {?} value\n     * @return {?} Option that has the corresponding value.\n     */\n        function (value) {\n            var _this = this;\n            /** @type {?} */\n            var correspondingOption = this.options.find(function (option) {\n                try {\n                    // Treat null as a special reset value.\n                    return option.value != null && _this._compareWith(option.value, value);\n                }\n                catch (error) {\n                    if (isDevMode()) {\n                        // Notify developers of errors in their comparator.\n                        console.warn(error);\n                    }\n                    return false;\n                }\n            });\n            if (correspondingOption) {\n                this._selectionModel.select(correspondingOption);\n            }\n            return correspondingOption;\n        };\n    /**\n     * Sets up a key manager to listen to keyboard events on the overlay panel.\n     * @return {?}\n     */\n    MatSelect.prototype._initKeyManager = /**\n     * Sets up a key manager to listen to keyboard events on the overlay panel.\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this._keyManager = new ActiveDescendantKeyManager(this.options)\n                .withTypeAhead()\n                .withVerticalOrientation()\n                .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(function () {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                _this.focus();\n                _this.close();\n            });\n            this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(function () {\n                if (_this._panelOpen && _this.panel) {\n                    _this._scrollActiveOptionIntoView();\n                }\n                else if (!_this._panelOpen && !_this.multiple && _this._keyManager.activeItem) {\n                    _this._keyManager.activeItem._selectViaInteraction();\n                }\n            });\n        };\n    /**\n     * Drops current option subscriptions and IDs and resets from scratch.\n     * @return {?}\n     */\n    MatSelect.prototype._resetOptions = /**\n     * Drops current option subscriptions and IDs and resets from scratch.\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            /** @type {?} */\n            var changedOrDestroyed = merge(this.options.changes, this._destroy);\n            this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(function (event) {\n                _this._onSelect(event.source, event.isUserInput);\n                if (event.isUserInput && !_this.multiple && _this._panelOpen) {\n                    _this.close();\n                    _this.focus();\n                }\n            });\n            // Listen to changes in the internal state of the options and react accordingly.\n            // Handles cases like the labels of the selected options changing.\n            merge.apply(void 0, this.options.map(function (option) { return option._stateChanges; })).pipe(takeUntil(changedOrDestroyed))\n                .subscribe(function () {\n                _this._changeDetectorRef.markForCheck();\n                _this.stateChanges.next();\n            });\n            this._setOptionIds();\n        };\n    /**\n     * Invoked when an option is clicked.\n     * @param {?} option\n     * @param {?} isUserInput\n     * @return {?}\n     */\n    MatSelect.prototype._onSelect = /**\n     * Invoked when an option is clicked.\n     * @param {?} option\n     * @param {?} isUserInput\n     * @return {?}\n     */\n        function (option, isUserInput) {\n            /** @type {?} */\n            var wasSelected = this._selectionModel.isSelected(option);\n            if (option.value == null && !this._multiple) {\n                option.deselect();\n                this._selectionModel.clear();\n                this._propagateChanges(option.value);\n            }\n            else {\n                option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n                if (isUserInput) {\n                    this._keyManager.setActiveItem(option);\n                }\n                if (this.multiple) {\n                    this._sortValues();\n                    if (isUserInput) {\n                        // In case the user selected the option with their mouse, we\n                        // want to restore focus back to the trigger, in order to\n                        // prevent the select keyboard controls from clashing with\n                        // the ones from `mat-option`.\n                        this.focus();\n                    }\n                }\n            }\n            if (wasSelected !== this._selectionModel.isSelected(option)) {\n                this._propagateChanges();\n            }\n            this.stateChanges.next();\n        };\n    /**\n     * Sorts the selected values in the selected based on their order in the panel.\n     * @return {?}\n     */\n    MatSelect.prototype._sortValues = /**\n     * Sorts the selected values in the selected based on their order in the panel.\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.multiple) {\n                /** @type {?} */\n                var options_1 = this.options.toArray();\n                this._selectionModel.sort(function (a, b) {\n                    return _this.sortComparator ? _this.sortComparator(a, b, options_1) :\n                        options_1.indexOf(a) - options_1.indexOf(b);\n                });\n                this.stateChanges.next();\n            }\n        };\n    /**\n     * Emits change event to set the model value.\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n    MatSelect.prototype._propagateChanges = /**\n     * Emits change event to set the model value.\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n        function (fallbackValue) {\n            /** @type {?} */\n            var valueToEmit = null;\n            if (this.multiple) {\n                valueToEmit = ( /** @type {?} */(this.selected)).map(function (option) { return option.value; });\n            }\n            else {\n                valueToEmit = this.selected ? ( /** @type {?} */(this.selected)).value : fallbackValue;\n            }\n            this._value = valueToEmit;\n            this.valueChange.emit(valueToEmit);\n            this._onChange(valueToEmit);\n            this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n            this._changeDetectorRef.markForCheck();\n        };\n    /**\n     * Records option IDs to pass to the aria-owns property.\n     * @return {?}\n     */\n    MatSelect.prototype._setOptionIds = /**\n     * Records option IDs to pass to the aria-owns property.\n     * @return {?}\n     */\n        function () {\n            this._optionIds = this.options.map(function (option) { return option.id; }).join(' ');\n        };\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     * @return {?}\n     */\n    MatSelect.prototype._highlightCorrectOption = /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     * @return {?}\n     */\n        function () {\n            if (this._keyManager) {\n                if (this.empty) {\n                    this._keyManager.setFirstItemActive();\n                }\n                else {\n                    this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n                }\n            }\n        };\n    /**\n     * Scrolls the active option into view.\n     * @return {?}\n     */\n    MatSelect.prototype._scrollActiveOptionIntoView = /**\n     * Scrolls the active option into view.\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var activeOptionIndex = this._keyManager.activeItemIndex || 0;\n            /** @type {?} */\n            var labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n            this.panel.nativeElement.scrollTop = _getOptionScrollPosition(activeOptionIndex + labelCount, this._getItemHeight(), this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n        };\n    /** Focuses the select element. */\n    /**\n     * Focuses the select element.\n     * @return {?}\n     */\n    MatSelect.prototype.focus = /**\n     * Focuses the select element.\n     * @return {?}\n     */\n        function () {\n            this._elementRef.nativeElement.focus();\n        };\n    /**\n     * Gets the index of the provided option in the option list.\n     * @param {?} option\n     * @return {?}\n     */\n    MatSelect.prototype._getOptionIndex = /**\n     * Gets the index of the provided option in the option list.\n     * @param {?} option\n     * @return {?}\n     */\n        function (option) {\n            return this.options.reduce(function (result, current, index) {\n                return result === undefined ? (option === current ? index : undefined) : result;\n            }, undefined);\n        };\n    /**\n     * Calculates the scroll position and x- and y-offsets of the overlay panel.\n     * @return {?}\n     */\n    MatSelect.prototype._calculateOverlayPosition = /**\n     * Calculates the scroll position and x- and y-offsets of the overlay panel.\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var itemHeight = this._getItemHeight();\n            /** @type {?} */\n            var items = this._getItemCount();\n            /** @type {?} */\n            var panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n            /** @type {?} */\n            var scrollContainerHeight = items * itemHeight;\n            /** @type {?} */\n            var maxScroll = scrollContainerHeight - panelHeight;\n            /** @type {?} */\n            var selectedOptionOffset = this.empty ? 0 : /** @type {?} */ ((this._getOptionIndex(this._selectionModel.selected[0])));\n            selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n            /** @type {?} */\n            var scrollBuffer = panelHeight / 2;\n            this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n            this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n            this._checkOverlayWithinViewport(maxScroll);\n        };\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    MatSelect.prototype._calculateOverlayScroll = /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n        function (selectedIndex, scrollBuffer, maxScroll) {\n            /** @type {?} */\n            var itemHeight = this._getItemHeight();\n            /** @type {?} */\n            var optionOffsetFromScrollTop = itemHeight * selectedIndex;\n            /** @type {?} */\n            var halfOptionHeight = itemHeight / 2;\n            /** @type {?} */\n            var optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n            return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n        };\n    /** Returns the aria-label of the select component. */\n    /**\n     * Returns the aria-label of the select component.\n     * @return {?}\n     */\n    MatSelect.prototype._getAriaLabel = /**\n     * Returns the aria-label of the select component.\n     * @return {?}\n     */\n        function () {\n            // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n            // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n            return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n        };\n    /** Returns the aria-labelledby of the select component. */\n    /**\n     * Returns the aria-labelledby of the select component.\n     * @return {?}\n     */\n    MatSelect.prototype._getAriaLabelledby = /**\n     * Returns the aria-labelledby of the select component.\n     * @return {?}\n     */\n        function () {\n            if (this.ariaLabelledby) {\n                return this.ariaLabelledby;\n            }\n            // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n            // computed label. `this.ariaLabel` is only the user-specified label.\n            if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n                this._getAriaLabel()) {\n                return null;\n            }\n            return this._parentFormField._labelId || null;\n        };\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    /**\n     * Determines the `aria-activedescendant` to be set on the host.\n     * @return {?}\n     */\n    MatSelect.prototype._getAriaActiveDescendant = /**\n     * Determines the `aria-activedescendant` to be set on the host.\n     * @return {?}\n     */\n        function () {\n            if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n                return this._keyManager.activeItem.id;\n            }\n            return null;\n        };\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     * @return {?}\n     */\n    MatSelect.prototype._calculateOverlayOffsetX = /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n            /** @type {?} */\n            var viewportSize = this._viewportRuler.getViewportSize();\n            /** @type {?} */\n            var isRtl = this._isRtl();\n            /** @type {?} */\n            var paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                SELECT_PANEL_PADDING_X * 2;\n            /** @type {?} */\n            var offsetX;\n            // Adjust the offset, depending on the option padding.\n            if (this.multiple) {\n                offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n            }\n            else {\n                /** @type {?} */\n                var selected = this._selectionModel.selected[0] || this.options.first;\n                offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n            }\n            // Invert the offset in LTR.\n            if (!isRtl) {\n                offsetX *= -1;\n            }\n            /** @type {?} */\n            var leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n            /** @type {?} */\n            var rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                + (isRtl ? 0 : paddingWidth);\n            // If the element overflows on either side, reduce the offset to allow it to fit.\n            if (leftOverflow > 0) {\n                offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n            }\n            else if (rightOverflow > 0) {\n                offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n            }\n            // Set the offset directly in order to avoid having to go through change detection and\n            // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n            // blurry content in some browsers.\n            this.overlayDir.offsetX = Math.round(offsetX);\n            this.overlayDir.overlayRef.updatePosition();\n        };\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    MatSelect.prototype._calculateOverlayOffsetY = /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n        function (selectedIndex, scrollBuffer, maxScroll) {\n            /** @type {?} */\n            var itemHeight = this._getItemHeight();\n            /** @type {?} */\n            var optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n            /** @type {?} */\n            var maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n            /** @type {?} */\n            var optionOffsetFromPanelTop;\n            // Disable offset if requested by user by returning 0 as value to offset\n            if (this._disableOptionCentering) {\n                return 0;\n            }\n            if (this._scrollTop === 0) {\n                optionOffsetFromPanelTop = selectedIndex * itemHeight;\n            }\n            else if (this._scrollTop === maxScroll) {\n                /** @type {?} */\n                var firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n                /** @type {?} */\n                var selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n                /** @type {?} */\n                var partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n                // Because the panel height is longer than the height of the options alone,\n                // there is always extra padding at the top or bottom of the panel. When\n                // scrolled to the very bottom, this padding is at the top of the panel and\n                // must be added to the offset.\n                optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n            }\n            else {\n                // If the option was scrolled to the middle of the panel using a scroll buffer,\n                // its offset will be the scroll buffer minus the half height that was added to\n                // center it.\n                optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n            }\n            // The final offset is the option's offset from the top, adjusted for the height difference,\n            // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n            // The value is rounded to prevent some browsers from blurring the content.\n            return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n        };\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    MatSelect.prototype._checkOverlayWithinViewport = /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     * @param {?} maxScroll\n     * @return {?}\n     */\n        function (maxScroll) {\n            /** @type {?} */\n            var itemHeight = this._getItemHeight();\n            /** @type {?} */\n            var viewportSize = this._viewportRuler.getViewportSize();\n            /** @type {?} */\n            var topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n            /** @type {?} */\n            var bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n            /** @type {?} */\n            var panelHeightTop = Math.abs(this._offsetY);\n            /** @type {?} */\n            var totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n            /** @type {?} */\n            var panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n            if (panelHeightBottom > bottomSpaceAvailable) {\n                this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n            }\n            else if (panelHeightTop > topSpaceAvailable) {\n                this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n            }\n            else {\n                this._transformOrigin = this._getOriginBasedOnOption();\n            }\n        };\n    /**\n     * Adjusts the overlay panel up to fit in the viewport.\n     * @param {?} panelHeightBottom\n     * @param {?} bottomSpaceAvailable\n     * @return {?}\n     */\n    MatSelect.prototype._adjustPanelUp = /**\n     * Adjusts the overlay panel up to fit in the viewport.\n     * @param {?} panelHeightBottom\n     * @param {?} bottomSpaceAvailable\n     * @return {?}\n     */\n        function (panelHeightBottom, bottomSpaceAvailable) {\n            /** @type {?} */\n            var distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n            // Scrolls the panel up by the distance it was extending past the boundary, then\n            // adjusts the offset by that amount to move the panel up into the viewport.\n            this._scrollTop -= distanceBelowViewport;\n            this._offsetY -= distanceBelowViewport;\n            this._transformOrigin = this._getOriginBasedOnOption();\n            // If the panel is scrolled to the very top, it won't be able to fit the panel\n            // by scrolling, so set the offset to 0 to allow the fallback position to take\n            // effect.\n            if (this._scrollTop <= 0) {\n                this._scrollTop = 0;\n                this._offsetY = 0;\n                this._transformOrigin = \"50% bottom 0px\";\n            }\n        };\n    /**\n     * Adjusts the overlay panel down to fit in the viewport.\n     * @param {?} panelHeightTop\n     * @param {?} topSpaceAvailable\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    MatSelect.prototype._adjustPanelDown = /**\n     * Adjusts the overlay panel down to fit in the viewport.\n     * @param {?} panelHeightTop\n     * @param {?} topSpaceAvailable\n     * @param {?} maxScroll\n     * @return {?}\n     */\n        function (panelHeightTop, topSpaceAvailable, maxScroll) {\n            /** @type {?} */\n            var distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n            // Scrolls the panel down by the distance it was extending past the boundary, then\n            // adjusts the offset by that amount to move the panel down into the viewport.\n            this._scrollTop += distanceAboveViewport;\n            this._offsetY += distanceAboveViewport;\n            this._transformOrigin = this._getOriginBasedOnOption();\n            // If the panel is scrolled to the very bottom, it won't be able to fit the\n            // panel by scrolling, so set the offset to 0 to allow the fallback position\n            // to take effect.\n            if (this._scrollTop >= maxScroll) {\n                this._scrollTop = maxScroll;\n                this._offsetY = 0;\n                this._transformOrigin = \"50% top 0px\";\n                return;\n            }\n        };\n    /**\n     * Sets the transform origin point based on the selected option.\n     * @return {?}\n     */\n    MatSelect.prototype._getOriginBasedOnOption = /**\n     * Sets the transform origin point based on the selected option.\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var itemHeight = this._getItemHeight();\n            /** @type {?} */\n            var optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n            /** @type {?} */\n            var originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n            return \"50% \" + originY + \"px 0px\";\n        };\n    /**\n     * Calculates the amount of items in the select. This includes options and group labels.\n     * @return {?}\n     */\n    MatSelect.prototype._getItemCount = /**\n     * Calculates the amount of items in the select. This includes options and group labels.\n     * @return {?}\n     */\n        function () {\n            return this.options.length + this.optionGroups.length;\n        };\n    /**\n     * Calculates the height of the select's options.\n     * @return {?}\n     */\n    MatSelect.prototype._getItemHeight = /**\n     * Calculates the height of the select's options.\n     * @return {?}\n     */\n        function () {\n            return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n        };\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    MatSelect.prototype.setDescribedByIds = /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n        function (ids) {\n            this._ariaDescribedby = ids.join(' ');\n        };\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    MatSelect.prototype.onContainerClick = /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n        function () {\n            this.focus();\n            this.open();\n        };\n    Object.defineProperty(MatSelect.prototype, \"shouldLabelFloat\", {\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get: /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         * @return {?}\n         */ function () {\n            return this._panelOpen || !this.empty;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return MatSelect;\n}(_MatSelectMixinBase));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar MatSelectModule = /** @class */ /*@__PURE__*/ (function () {\n    function MatSelectModule() {\n    }\n    return MatSelectModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nexport { MatSelectModule, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelectChange, MatSelectBase, _MatSelectMixinBase, MatSelectTrigger, MatSelect, matSelectAnimations, transformPanel, fadeInContent };\n//# sourceMappingURL=select.es5.js.map\n",null]}