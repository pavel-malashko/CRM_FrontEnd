{"remainingRequest":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@angular\\material\\esm5\\grid-list.es5.js","dependencies":[{"path":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@angular\\material\\esm5\\grid-list.es5.js","mtime":499162500000},{"path":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** PURE_IMPORTS_START _angular_core,_angular_material_core,_angular_cdk_coercion,tslib,_angular_cdk_bidi PURE_IMPORTS_END */\nimport { InjectionToken, Component, ViewEncapsulation, ElementRef, Input, Optional, ContentChildren, Directive, ChangeDetectionStrategy, Inject, NgModule } from '@angular/core';\nimport { MatLine, setLines, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { __extends } from 'tslib';\nimport { Directionality } from '@angular/cdk/bidi';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * \\@docs-private\n  @type {?} */\nvar MAT_GRID_LIST = /*@__PURE__*/ new InjectionToken('MAT_GRID_LIST');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar MatGridTile = /** @class */ /*@__PURE__*/ (function () {\n    function MatGridTile(_element, _gridList) {\n        this._element = _element;\n        this._gridList = _gridList;\n        this._rowspan = 1;\n        this._colspan = 1;\n    }\n    Object.defineProperty(MatGridTile.prototype, \"rowspan\", {\n        /** Amount of rows that the grid tile takes up. */\n        get: /**\n         * Amount of rows that the grid tile takes up.\n         * @return {?}\n         */ function () { return this._rowspan; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) { this._rowspan = Math.round(coerceNumberProperty(value)); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatGridTile.prototype, \"colspan\", {\n        /** Amount of columns that the grid tile takes up. */\n        get: /**\n         * Amount of columns that the grid tile takes up.\n         * @return {?}\n         */ function () { return this._colspan; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) { this._colspan = Math.round(coerceNumberProperty(value)); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     */\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    MatGridTile.prototype._setStyle = /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n        function (property, value) {\n            ( /** @type {?} */(this._element.nativeElement.style))[property] = value;\n        };\n    return MatGridTile;\n}());\nvar MatGridTileText = /** @class */ /*@__PURE__*/ (function () {\n    function MatGridTileText(_element) {\n        this._element = _element;\n    }\n    /**\n     * @return {?}\n     */\n    MatGridTileText.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n        function () {\n            setLines(this._lines, this._element);\n        };\n    return MatGridTileText;\n}());\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MatGridAvatarCssMatStyler = /** @class */ /*@__PURE__*/ (function () {\n    function MatGridAvatarCssMatStyler() {\n    }\n    return MatGridAvatarCssMatStyler;\n}());\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MatGridTileHeaderCssMatStyler = /** @class */ /*@__PURE__*/ (function () {\n    function MatGridTileHeaderCssMatStyler() {\n    }\n    return MatGridTileHeaderCssMatStyler;\n}());\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nvar MatGridTileFooterCssMatStyler = /** @class */ /*@__PURE__*/ (function () {\n    function MatGridTileFooterCssMatStyler() {\n    }\n    return MatGridTileFooterCssMatStyler;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * \\@docs-private\n */\nvar /**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * \\@docs-private\n */ TileCoordinator = /** @class */ /*@__PURE__*/ (function () {\n    function TileCoordinator() {\n        /**\n         * Index at which the search for the next gap will start.\n         */\n        this.columnIndex = 0;\n        /**\n         * The current row index.\n         */\n        this.rowIndex = 0;\n    }\n    Object.defineProperty(TileCoordinator.prototype, \"rowCount\", {\n        /** Gets the total number of rows occupied by tiles */\n        get: /**\n         * Gets the total number of rows occupied by tiles\n         * @return {?}\n         */ function () { return this.rowIndex + 1; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TileCoordinator.prototype, \"rowspan\", {\n        /**\n         * Gets the total span of rows occupied by tiles.\n         * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n         */\n        get: /**\n         * Gets the total span of rows occupied by tiles.\n         * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n         * @return {?}\n         */ function () {\n            /** @type {?} */\n            var lastRowMax = Math.max.apply(Math, this.tracker);\n            // if any of the tiles has a rowspan that pushes it beyond the total row count,\n            // add the difference to the rowcount\n            return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Updates the tile positions.\n     * @param numColumns Amount of columns in the grid.\n     */\n    /**\n     * Updates the tile positions.\n     * @param {?} numColumns Amount of columns in the grid.\n     * @param {?} tiles\n     * @return {?}\n     */\n    TileCoordinator.prototype.update = /**\n     * Updates the tile positions.\n     * @param {?} numColumns Amount of columns in the grid.\n     * @param {?} tiles\n     * @return {?}\n     */\n        function (numColumns, tiles) {\n            var _this = this;\n            this.columnIndex = 0;\n            this.rowIndex = 0;\n            this.tracker = new Array(numColumns);\n            this.tracker.fill(0, 0, this.tracker.length);\n            this.positions = tiles.map(function (tile) { return _this._trackTile(tile); });\n        };\n    /**\n     * Calculates the row and col position of a tile.\n     * @param {?} tile\n     * @return {?}\n     */\n    TileCoordinator.prototype._trackTile = /**\n     * Calculates the row and col position of a tile.\n     * @param {?} tile\n     * @return {?}\n     */\n        function (tile) {\n            /** @type {?} */\n            var gapStartIndex = this._findMatchingGap(tile.colspan);\n            // Place tile in the resulting gap.\n            this._markTilePosition(gapStartIndex, tile);\n            // The next time we look for a gap, the search will start at columnIndex, which should be\n            // immediately after the tile that has just been placed.\n            this.columnIndex = gapStartIndex + tile.colspan;\n            return new TilePosition(this.rowIndex, gapStartIndex);\n        };\n    /**\n     * Finds the next available space large enough to fit the tile.\n     * @param {?} tileCols\n     * @return {?}\n     */\n    TileCoordinator.prototype._findMatchingGap = /**\n     * Finds the next available space large enough to fit the tile.\n     * @param {?} tileCols\n     * @return {?}\n     */\n        function (tileCols) {\n            if (tileCols > this.tracker.length) {\n                throw Error(\"mat-grid-list: tile with colspan \" + tileCols + \" is wider than \" +\n                    (\"grid with cols=\\\"\" + this.tracker.length + \"\\\".\"));\n            }\n            /** @type {?} */\n            var gapStartIndex = -1;\n            /** @type {?} */\n            var gapEndIndex = -1;\n            // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n            do {\n                // If we've reached the end of the row, go to the next row.\n                if (this.columnIndex + tileCols > this.tracker.length) {\n                    this._nextRow();\n                    gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                    gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                    continue;\n                }\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                // If there are no more empty spaces in this row at all, move on to the next row.\n                if (gapStartIndex == -1) {\n                    this._nextRow();\n                    gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                    gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                    continue;\n                }\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                // If a gap large enough isn't found, we want to start looking immediately after the current\n                // gap on the next iteration.\n                this.columnIndex = gapStartIndex + 1;\n                // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n                // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n            } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n            // If we still didn't manage to find a gap, ensure that the index is\n            // at least zero so the tile doesn't get pulled out of the grid.\n            return Math.max(gapStartIndex, 0);\n        };\n    /**\n     * Move \"down\" to the next row.\n     * @return {?}\n     */\n    TileCoordinator.prototype._nextRow = /**\n     * Move \"down\" to the next row.\n     * @return {?}\n     */\n        function () {\n            this.columnIndex = 0;\n            this.rowIndex++;\n            // Decrement all spaces by one to reflect moving down one row.\n            for (var i = 0; i < this.tracker.length; i++) {\n                this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n            }\n        };\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     * @param {?} gapStartIndex\n     * @return {?}\n     */\n    TileCoordinator.prototype._findGapEndIndex = /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     * @param {?} gapStartIndex\n     * @return {?}\n     */\n        function (gapStartIndex) {\n            for (var i = gapStartIndex + 1; i < this.tracker.length; i++) {\n                if (this.tracker[i] != 0) {\n                    return i;\n                }\n            }\n            // The gap ends with the end of the row.\n            return this.tracker.length;\n        };\n    /**\n     * Update the tile tracker to account for the given tile in the given space.\n     * @param {?} start\n     * @param {?} tile\n     * @return {?}\n     */\n    TileCoordinator.prototype._markTilePosition = /**\n     * Update the tile tracker to account for the given tile in the given space.\n     * @param {?} start\n     * @param {?} tile\n     * @return {?}\n     */\n        function (start, tile) {\n            for (var i = 0; i < tile.colspan; i++) {\n                this.tracker[start + i] = tile.rowspan;\n            }\n        };\n    return TileCoordinator;\n}());\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\nvar /**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */ TilePosition = /** @class */ /*@__PURE__*/ (function () {\n    function TilePosition(row, col) {\n        this.row = row;\n        this.col = col;\n    }\n    return TilePosition;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n  @type {?} */\nvar cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */\nvar /**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */ TileStyler = /** @class */ /*@__PURE__*/ (function () {\n    function TileStyler() {\n        this._rows = 0;\n        this._rowspan = 0;\n    }\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param gutterSize Size of the grid's gutter.\n     * @param tracker Instance of the TileCoordinator.\n     * @param cols Amount of columns in the grid.\n     * @param direction Layout direction of the grid.\n     */\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param {?} gutterSize Size of the grid's gutter.\n     * @param {?} tracker Instance of the TileCoordinator.\n     * @param {?} cols Amount of columns in the grid.\n     * @param {?} direction Layout direction of the grid.\n     * @return {?}\n     */\n    TileStyler.prototype.init = /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param {?} gutterSize Size of the grid's gutter.\n     * @param {?} tracker Instance of the TileCoordinator.\n     * @param {?} cols Amount of columns in the grid.\n     * @param {?} direction Layout direction of the grid.\n     * @return {?}\n     */\n        function (gutterSize, tracker, cols, direction) {\n            this._gutterSize = normalizeUnits(gutterSize);\n            this._rows = tracker.rowCount;\n            this._rowspan = tracker.rowspan;\n            this._cols = cols;\n            this._direction = direction;\n        };\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    TileStyler.prototype.getBaseTileSize = /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n        function (sizePercent, gutterFraction) {\n            // Take the base size percent (as would be if evenly dividing the size between cells),\n            // and then subtracting the size of one gutter. However, since there are no gutters on the\n            // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n            // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n            // edge evenly among the cells).\n            return \"(\" + sizePercent + \"% - (\" + this._gutterSize + \" * \" + gutterFraction + \"))\";\n        };\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param offset Number of tiles that have already been rendered in the row/column.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @return Position of the tile as a CSS calc() expression.\n     */\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} offset Number of tiles that have already been rendered in the row/column.\n     * @return {?} Position of the tile as a CSS calc() expression.\n     */\n    TileStyler.prototype.getTilePosition = /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} offset Number of tiles that have already been rendered in the row/column.\n     * @return {?} Position of the tile as a CSS calc() expression.\n     */\n        function (baseSize, offset) {\n            // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n            // row/column (offset).\n            return offset === 0 ? '0' : calc(\"(\" + baseSize + \" + \" + this._gutterSize + \") * \" + offset);\n        };\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param span The tile's rowspan or colspan.\n     * @return Size of the tile as a CSS calc() expression.\n     */\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} span The tile's rowspan or colspan.\n     * @return {?} Size of the tile as a CSS calc() expression.\n     */\n    TileStyler.prototype.getTileSize = /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} span The tile's rowspan or colspan.\n     * @return {?} Size of the tile as a CSS calc() expression.\n     */\n        function (baseSize, span) {\n            return \"(\" + baseSize + \" * \" + span + \") + (\" + (span - 1) + \" * \" + this._gutterSize + \")\";\n        };\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param tile Tile to which to apply the styling.\n     * @param rowIndex Index of the tile's row.\n     * @param colIndex Index of the tile's column.\n     */\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param {?} tile Tile to which to apply the styling.\n     * @param {?} rowIndex Index of the tile's row.\n     * @param {?} colIndex Index of the tile's column.\n     * @return {?}\n     */\n    TileStyler.prototype.setStyle = /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param {?} tile Tile to which to apply the styling.\n     * @param {?} rowIndex Index of the tile's row.\n     * @param {?} colIndex Index of the tile's column.\n     * @return {?}\n     */\n        function (tile, rowIndex, colIndex) {\n            /** @type {?} */\n            var percentWidthPerTile = 100 / this._cols;\n            /** @type {?} */\n            var gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n            this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n            this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n        };\n    /** Sets the horizontal placement of the tile in the list. */\n    /**\n     * Sets the horizontal placement of the tile in the list.\n     * @param {?} tile\n     * @param {?} colIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    TileStyler.prototype.setColStyles = /**\n     * Sets the horizontal placement of the tile in the list.\n     * @param {?} tile\n     * @param {?} colIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n        function (tile, colIndex, percentWidth, gutterWidth) {\n            /** @type {?} */\n            var baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n            /** @type {?} */\n            var side = this._direction === 'rtl' ? 'right' : 'left';\n            tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n            tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n        };\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     */\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     * @return {?}\n     */\n    TileStyler.prototype.getGutterSpan = /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     * @return {?}\n     */\n        function () {\n            return this._gutterSize + \" * (\" + this._rowspan + \" - 1)\";\n        };\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param tileHeight Height of the tile.\n     */\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param {?} tileHeight Height of the tile.\n     * @return {?}\n     */\n    TileStyler.prototype.getTileSpan = /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param {?} tileHeight Height of the tile.\n     * @return {?}\n     */\n        function (tileHeight) {\n            return this._rowspan + \" * \" + this.getTileSize(tileHeight, 1);\n        };\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * @docs-private\n     */\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * \\@docs-private\n     * @return {?}\n     */\n    TileStyler.prototype.getComputedHeight = /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * \\@docs-private\n     * @return {?}\n     */\n        function () { return null; };\n    return TileStyler;\n}());\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * \\@docs-private\n */\nvar /**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * \\@docs-private\n */ FixedTileStyler = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(FixedTileStyler, _super);\n    function FixedTileStyler(fixedRowHeight) {\n        var _this = _super.call(this) || this;\n        _this.fixedRowHeight = fixedRowHeight;\n        return _this;\n    }\n    /**\n     * @param {?} gutterSize\n     * @param {?} tracker\n     * @param {?} cols\n     * @param {?} direction\n     * @return {?}\n     */\n    FixedTileStyler.prototype.init = /**\n     * @param {?} gutterSize\n     * @param {?} tracker\n     * @param {?} cols\n     * @param {?} direction\n     * @return {?}\n     */\n        function (gutterSize, tracker, cols, direction) {\n            _super.prototype.init.call(this, gutterSize, tracker, cols, direction);\n            this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n            if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n                throw Error(\"Invalid value \\\"\" + this.fixedRowHeight + \"\\\" set as rowHeight.\");\n            }\n        };\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n    FixedTileStyler.prototype.setRowStyles = /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n        function (tile, rowIndex) {\n            tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n            tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n        };\n    /**\n     * @return {?}\n     */\n    FixedTileStyler.prototype.getComputedHeight = /**\n     * @return {?}\n     */\n        function () {\n            return [\n                'height', calc(this.getTileSpan(this.fixedRowHeight) + \" + \" + this.getGutterSpan())\n            ];\n        };\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    FixedTileStyler.prototype.reset = /**\n     * @param {?} list\n     * @return {?}\n     */\n        function (list) {\n            list._setListStyle(['height', null]);\n            if (list._tiles) {\n                list._tiles.forEach(function (tile) {\n                    tile._setStyle('top', null);\n                    tile._setStyle('height', null);\n                });\n            }\n        };\n    return FixedTileStyler;\n}(TileStyler));\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * \\@docs-private\n */\nvar /**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * \\@docs-private\n */ RatioTileStyler = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(RatioTileStyler, _super);\n    function RatioTileStyler(value) {\n        var _this = _super.call(this) || this;\n        _this._parseRatio(value);\n        return _this;\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    RatioTileStyler.prototype.setRowStyles = /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n        function (tile, rowIndex, percentWidth, gutterWidth) {\n            /** @type {?} */\n            var percentHeightPerTile = percentWidth / this.rowHeightRatio;\n            this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n            // Use padding-top and margin-top to maintain the given aspect ratio, as\n            // a percentage-based value for these properties is applied versus the *width* of the\n            // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n            tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n            tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n        };\n    /**\n     * @return {?}\n     */\n    RatioTileStyler.prototype.getComputedHeight = /**\n     * @return {?}\n     */\n        function () {\n            return [\n                'paddingBottom', calc(this.getTileSpan(this.baseTileHeight) + \" + \" + this.getGutterSpan())\n            ];\n        };\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    RatioTileStyler.prototype.reset = /**\n     * @param {?} list\n     * @return {?}\n     */\n        function (list) {\n            list._setListStyle(['paddingBottom', null]);\n            list._tiles.forEach(function (tile) {\n                tile._setStyle('marginTop', null);\n                tile._setStyle('paddingTop', null);\n            });\n        };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    RatioTileStyler.prototype._parseRatio = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            /** @type {?} */\n            var ratioParts = value.split(':');\n            if (ratioParts.length !== 2) {\n                throw Error(\"mat-grid-list: invalid ratio given for row-height: \\\"\" + value + \"\\\"\");\n            }\n            this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n        };\n    return RatioTileStyler;\n}(TileStyler));\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * \\@docs-private\n */\nvar /**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * \\@docs-private\n */ FitTileStyler = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(FitTileStyler, _super);\n    function FitTileStyler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n    FitTileStyler.prototype.setRowStyles = /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n        function (tile, rowIndex) {\n            /** @type {?} */\n            var percentHeightPerTile = 100 / this._rowspan;\n            /** @type {?} */\n            var gutterHeightPerTile = (this._rows - 1) / this._rows;\n            /** @type {?} */\n            var baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n            tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n            tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n        };\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    FitTileStyler.prototype.reset = /**\n     * @param {?} list\n     * @return {?}\n     */\n        function (list) {\n            if (list._tiles) {\n                list._tiles.forEach(function (tile) {\n                    tile._setStyle('top', null);\n                    tile._setStyle('height', null);\n                });\n            }\n        };\n    return FitTileStyler;\n}(TileStyler));\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp) { return \"calc(\" + exp + \")\"; }\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value) {\n    return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar MAT_FIT_MODE = 'fit';\nvar MatGridList = /** @class */ /*@__PURE__*/ (function () {\n    function MatGridList(_element, _dir) {\n        this._element = _element;\n        this._dir = _dir;\n        /**\n         * The amount of space between tiles. This will be something like '5px' or '2em'.\n         */\n        this._gutter = '1px';\n    }\n    Object.defineProperty(MatGridList.prototype, \"cols\", {\n        /** Amount of columns in the grid list. */\n        get: /**\n         * Amount of columns in the grid list.\n         * @return {?}\n         */ function () { return this._cols; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatGridList.prototype, \"gutterSize\", {\n        /** Size of the grid list's gutter in pixels. */\n        get: /**\n         * Size of the grid list's gutter in pixels.\n         * @return {?}\n         */ function () { return this._gutter; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) { this._gutter = \"\" + (value == null ? '' : value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatGridList.prototype, \"rowHeight\", {\n        /** Set internal representation of row height from the user-provided value. */\n        get: /**\n         * Set internal representation of row height from the user-provided value.\n         * @return {?}\n         */ function () { return this._rowHeight; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            /** @type {?} */\n            var newValue = \"\" + (value == null ? '' : value);\n            if (newValue !== this._rowHeight) {\n                this._rowHeight = newValue;\n                this._setTileStyler(this._rowHeight);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatGridList.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this._checkCols();\n            this._checkRowHeight();\n        };\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     */\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     * @return {?}\n     */\n    MatGridList.prototype.ngAfterContentChecked = /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     * @return {?}\n     */\n        function () {\n            this._layoutTiles();\n        };\n    /**\n     * Throw a friendly error if cols property is missing\n     * @return {?}\n     */\n    MatGridList.prototype._checkCols = /**\n     * Throw a friendly error if cols property is missing\n     * @return {?}\n     */\n        function () {\n            if (!this.cols) {\n                throw Error(\"mat-grid-list: must pass in number of columns. \" +\n                    \"Example: <mat-grid-list cols=\\\"3\\\">\");\n            }\n        };\n    /**\n     * Default to equal width:height if rowHeight property is missing\n     * @return {?}\n     */\n    MatGridList.prototype._checkRowHeight = /**\n     * Default to equal width:height if rowHeight property is missing\n     * @return {?}\n     */\n        function () {\n            if (!this._rowHeight) {\n                this._setTileStyler('1:1');\n            }\n        };\n    /**\n     * Creates correct Tile Styler subtype based on rowHeight passed in by user\n     * @param {?} rowHeight\n     * @return {?}\n     */\n    MatGridList.prototype._setTileStyler = /**\n     * Creates correct Tile Styler subtype based on rowHeight passed in by user\n     * @param {?} rowHeight\n     * @return {?}\n     */\n        function (rowHeight) {\n            if (this._tileStyler) {\n                this._tileStyler.reset(this);\n            }\n            if (rowHeight === MAT_FIT_MODE) {\n                this._tileStyler = new FitTileStyler();\n            }\n            else if (rowHeight && rowHeight.indexOf(':') > -1) {\n                this._tileStyler = new RatioTileStyler(rowHeight);\n            }\n            else {\n                this._tileStyler = new FixedTileStyler(rowHeight);\n            }\n        };\n    /**\n     * Computes and applies the size and position for all children grid tiles.\n     * @return {?}\n     */\n    MatGridList.prototype._layoutTiles = /**\n     * Computes and applies the size and position for all children grid tiles.\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (!this._tileCoordinator) {\n                this._tileCoordinator = new TileCoordinator();\n            }\n            /** @type {?} */\n            var tracker = this._tileCoordinator;\n            /** @type {?} */\n            var tiles = this._tiles.filter(function (tile) { return !tile._gridList || tile._gridList === _this; });\n            /** @type {?} */\n            var direction = this._dir ? this._dir.value : 'ltr';\n            this._tileCoordinator.update(this.cols, tiles);\n            this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n            tiles.forEach(function (tile, index) {\n                /** @type {?} */\n                var pos = tracker.positions[index];\n                _this._tileStyler.setStyle(tile, pos.row, pos.col);\n            });\n            this._setListStyle(this._tileStyler.getComputedHeight());\n        };\n    /** Sets style on the main grid-list element, given the style name and value. */\n    /**\n     * Sets style on the main grid-list element, given the style name and value.\n     * @param {?} style\n     * @return {?}\n     */\n    MatGridList.prototype._setListStyle = /**\n     * Sets style on the main grid-list element, given the style name and value.\n     * @param {?} style\n     * @return {?}\n     */\n        function (style) {\n            if (style) {\n                ( /** @type {?} */(this._element.nativeElement.style))[style[0]] = style[1];\n            }\n        };\n    return MatGridList;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar MatGridListModule = /** @class */ /*@__PURE__*/ (function () {\n    function MatGridListModule() {\n    }\n    return MatGridListModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nexport { MatGridListModule, MatGridList, MatGridTile, MatGridTileText, MatGridAvatarCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MAT_GRID_LIST as ɵa7 };\n//# sourceMappingURL=grid-list.es5.js.map\n",null]}