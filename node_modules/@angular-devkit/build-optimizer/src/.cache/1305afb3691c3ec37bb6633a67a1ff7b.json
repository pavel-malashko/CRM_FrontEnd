{"remainingRequest":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@angular\\material\\esm5\\toolbar.es5.js","dependencies":[{"path":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@angular\\material\\esm5\\toolbar.es5.js","mtime":499162500000},{"path":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** PURE_IMPORTS_START tslib,_angular_cdk_platform,_angular_common,_angular_core,_angular_material_core PURE_IMPORTS_END */\nimport { __extends } from 'tslib';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, Inject, isDevMode, ViewEncapsulation, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * \\@docs-private\n */\nvar /**\n * \\@docs-private\n */ MatToolbarBase = /** @class */ /*@__PURE__*/ (function () {\n    function MatToolbarBase(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n    return MatToolbarBase;\n}());\n/** @type {?} */\nvar _MatToolbarMixinBase = /*@__PURE__*/ mixinColor(MatToolbarBase);\nvar MatToolbarRow = /** @class */ /*@__PURE__*/ (function () {\n    function MatToolbarRow() {\n    }\n    return MatToolbarRow;\n}());\nvar MatToolbar = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(MatToolbar, _super);\n    function MatToolbar(elementRef, _platform, document) {\n        var _this = _super.call(this, elementRef) || this;\n        _this._platform = _platform;\n        // TODO: make the document a required param when doing breaking changes.\n        _this._document = document;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    MatToolbar.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (!isDevMode() || !this._platform.isBrowser) {\n                return;\n            }\n            this._checkToolbarMixedModes();\n            this._toolbarRows.changes.subscribe(function () { return _this._checkToolbarMixedModes(); });\n        };\n    /**\n     * Throws an exception when developers are attempting to combine the different toolbar row modes.\n     * @return {?}\n     */\n    MatToolbar.prototype._checkToolbarMixedModes = /**\n     * Throws an exception when developers are attempting to combine the different toolbar row modes.\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (!this._toolbarRows.length) {\n                return;\n            }\n            /** @type {?} */\n            var isCombinedUsage = Array.from(this._elementRef.nativeElement.childNodes)\n                .filter(function (node) { return !(node.classList && node.classList.contains('mat-toolbar-row')); })\n                .filter(function (node) { return node.nodeType !== (_this._document ? _this._document.COMMENT_NODE : 8); })\n                .some(function (node) { return !!(node.textContent && node.textContent.trim()); });\n            if (isCombinedUsage) {\n                throwToolbarMixedModesError();\n            }\n        };\n    return MatToolbar;\n}(_MatToolbarMixinBase));\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * \\@docs-private\n * @return {?}\n */\nfunction throwToolbarMixedModesError() {\n    throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n        'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n        'inside of a `<mat-toolbar>` for a single row.');\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar MatToolbarModule = /** @class */ /*@__PURE__*/ (function () {\n    function MatToolbarModule() {\n    }\n    return MatToolbarModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nexport { MatToolbarModule, throwToolbarMixedModesError, MatToolbarBase, _MatToolbarMixinBase, MatToolbarRow, MatToolbar };\n//# sourceMappingURL=toolbar.es5.js.map\n",null]}