{"remainingRequest":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@angular\\material\\esm5\\snack-bar.es5.js","dependencies":[{"path":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@angular\\material\\esm5\\snack-bar.es5.js","mtime":499162500000},{"path":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** PURE_IMPORTS_START rxjs,_angular_core,_angular_animations,tslib,_angular_cdk_portal,rxjs_operators,_angular_cdk_overlay,_angular_common,_angular_material_core,_angular_material_button,_angular_cdk_a11y,_angular_cdk_layout PURE_IMPORTS_END */\nimport { Subject } from 'rxjs';\nimport { InjectionToken, Component, ViewEncapsulation, Inject, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgZone, ViewChild, NgModule, Injectable, Injector, Optional, SkipSelf, TemplateRef, defineInjectable, inject, INJECTOR } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { __extends, __assign } from 'tslib';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, PortalInjector, TemplatePortal } from '@angular/cdk/portal';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { OverlayModule, Overlay, OverlayConfig } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n * @template T\n */\nvar /**\n * Reference to a snack bar dispatched from the snack bar service.\n * @template T\n */ MatSnackBarRef = /** @class */ /*@__PURE__*/ (function () {\n    function MatSnackBarRef(containerInstance, _overlayRef) {\n        var _this = this;\n        this._overlayRef = _overlayRef;\n        /**\n         * Subject for notifying the user that the snack bar has been dismissed.\n         */\n        this._afterDismissed = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar has opened and appeared.\n         */\n        this._afterOpened = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar action was called.\n         */\n        this._onAction = new Subject();\n        /**\n         * Whether the snack bar was dismissed using the action button.\n         */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe(function () { return _this.dismiss(); });\n        containerInstance._onExit.subscribe(function () { return _this._finishDismiss(); });\n    }\n    /** Dismisses the snack bar. */\n    /**\n     * Dismisses the snack bar.\n     * @return {?}\n     */\n    MatSnackBarRef.prototype.dismiss = /**\n     * Dismisses the snack bar.\n     * @return {?}\n     */\n        function () {\n            if (!this._afterDismissed.closed) {\n                this.containerInstance.exit();\n            }\n            clearTimeout(this._durationTimeoutId);\n        };\n    /** Marks the snackbar action clicked. */\n    /**\n     * Marks the snackbar action clicked.\n     * @return {?}\n     */\n    MatSnackBarRef.prototype.dismissWithAction = /**\n     * Marks the snackbar action clicked.\n     * @return {?}\n     */\n        function () {\n            if (!this._onAction.closed) {\n                this._dismissedByAction = true;\n                this._onAction.next();\n                this._onAction.complete();\n            }\n        };\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    MatSnackBarRef.prototype.closeWithAction = /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n        function () {\n            this.dismissWithAction();\n        };\n    /** Dismisses the snack bar after some duration */\n    /**\n     * Dismisses the snack bar after some duration\n     * @param {?} duration\n     * @return {?}\n     */\n    MatSnackBarRef.prototype._dismissAfter = /**\n     * Dismisses the snack bar after some duration\n     * @param {?} duration\n     * @return {?}\n     */\n        function (duration) {\n            var _this = this;\n            this._durationTimeoutId = setTimeout(function () { return _this.dismiss(); }, duration);\n        };\n    /** Marks the snackbar as opened */\n    /**\n     * Marks the snackbar as opened\n     * @return {?}\n     */\n    MatSnackBarRef.prototype._open = /**\n     * Marks the snackbar as opened\n     * @return {?}\n     */\n        function () {\n            if (!this._afterOpened.closed) {\n                this._afterOpened.next();\n                this._afterOpened.complete();\n            }\n        };\n    /**\n     * Cleans up the DOM after closing.\n     * @return {?}\n     */\n    MatSnackBarRef.prototype._finishDismiss = /**\n     * Cleans up the DOM after closing.\n     * @return {?}\n     */\n        function () {\n            this._overlayRef.dispose();\n            if (!this._onAction.closed) {\n                this._onAction.complete();\n            }\n            this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n            this._afterDismissed.complete();\n            this._dismissedByAction = false;\n        };\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    /**\n     * Gets an observable that is notified when the snack bar is finished closing.\n     * @return {?}\n     */\n    MatSnackBarRef.prototype.afterDismissed = /**\n     * Gets an observable that is notified when the snack bar is finished closing.\n     * @return {?}\n     */\n        function () {\n            return this._afterDismissed.asObservable();\n        };\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    /**\n     * Gets an observable that is notified when the snack bar has opened and appeared.\n     * @return {?}\n     */\n    MatSnackBarRef.prototype.afterOpened = /**\n     * Gets an observable that is notified when the snack bar has opened and appeared.\n     * @return {?}\n     */\n        function () {\n            return this.containerInstance._onEnter;\n        };\n    /** Gets an observable that is notified when the snack bar action is called. */\n    /**\n     * Gets an observable that is notified when the snack bar action is called.\n     * @return {?}\n     */\n    MatSnackBarRef.prototype.onAction = /**\n     * Gets an observable that is notified when the snack bar action is called.\n     * @return {?}\n     */\n        function () {\n            return this._onAction.asObservable();\n        };\n    return MatSnackBarRef;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Injection token that can be used to access the data that was passed in to a snack bar.\n  @type {?} */\nvar MAT_SNACK_BAR_DATA = /*@__PURE__*/ new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n * @template D\n */\nvar /**\n * Configuration used when opening a snack-bar.\n * @template D\n */ MatSnackBarConfig = /** @class */ /*@__PURE__*/ (function () {\n    function MatSnackBarConfig() {\n        /**\n         * The politeness level for the MatAriaLiveAnnouncer announcement.\n         */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /**\n         * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n         */\n        this.duration = 0;\n        /**\n         * Data being injected into the child component.\n         */\n        this.data = null;\n        /**\n         * The horizontal position to place the snack bar.\n         */\n        this.horizontalPosition = 'center';\n        /**\n         * The vertical position to place the snack bar.\n         */\n        this.verticalPosition = 'bottom';\n    }\n    return MatSnackBarConfig;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nvar SimpleSnackBar = /** @class */ /*@__PURE__*/ (function () {\n    function SimpleSnackBar(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    /**\n     * Performs the action on the snack bar.\n     * @return {?}\n     */\n    SimpleSnackBar.prototype.action = /**\n     * Performs the action on the snack bar.\n     * @return {?}\n     */\n        function () {\n            this.snackBarRef.dismissWithAction();\n        };\n    Object.defineProperty(SimpleSnackBar.prototype, \"hasAction\", {\n        /** If the action button should be shown. */\n        get: /**\n         * If the action button should be shown.\n         * @return {?}\n         */ function () {\n            return !!this.data.action;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return SimpleSnackBar;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Animations used by the Material snack bar.\n * \\@docs-private\n  @type {?} */\nvar matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: /*@__PURE__*/ trigger('state', [\n        /*@__PURE__*/ state('void, hidden', /*@__PURE__*/ style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        /*@__PURE__*/ state('visible', /*@__PURE__*/ style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        /*@__PURE__*/ transition('* => visible', /*@__PURE__*/ animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        /*@__PURE__*/ transition('* => void, * => hidden', /*@__PURE__*/ animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', /*@__PURE__*/ style({\n            opacity: 0\n        }))),\n    ])\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nvar MatSnackBarContainer = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(MatSnackBarContainer, _super);\n    function MatSnackBarContainer(_ngZone, _elementRef, _changeDetectorRef, snackBarConfig) {\n        var _this = _super.call(this) || this;\n        _this._ngZone = _ngZone;\n        _this._elementRef = _elementRef;\n        _this._changeDetectorRef = _changeDetectorRef;\n        _this.snackBarConfig = snackBarConfig;\n        /**\n         * Whether the component has been destroyed.\n         */\n        _this._destroyed = false;\n        /**\n         * Subject for notifying that the snack bar has exited from view.\n         */\n        _this._onExit = new Subject();\n        /**\n         * Subject for notifying that the snack bar has finished entering the view.\n         */\n        _this._onEnter = new Subject();\n        /**\n         * The state of the snack bar animations.\n         */\n        _this._animationState = 'void';\n        return _this;\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    /**\n     * Attach a component portal as content to this snack bar container.\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype.attachComponentPortal = /**\n     * Attach a component portal as content to this snack bar container.\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n        function (portal) {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachComponentPortal(portal);\n        };\n    /** Attach a template portal as content to this snack bar container. */\n    /**\n     * Attach a template portal as content to this snack bar container.\n     * @template C\n     * @param {?} portal\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype.attachTemplatePortal = /**\n     * Attach a template portal as content to this snack bar container.\n     * @template C\n     * @param {?} portal\n     * @return {?}\n     */\n        function (portal) {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachTemplatePortal(portal);\n        };\n    /** Handle end of animations, updating the state of the snackbar. */\n    /**\n     * Handle end of animations, updating the state of the snackbar.\n     * @param {?} event\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype.onAnimationEnd = /**\n     * Handle end of animations, updating the state of the snackbar.\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            var fromState = event.fromState, toState = event.toState;\n            if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n                this._completeExit();\n            }\n            if (toState === 'visible') {\n                /** @type {?} */\n                var onEnter_1 = this._onEnter;\n                this._ngZone.run(function () {\n                    onEnter_1.next();\n                    onEnter_1.complete();\n                });\n            }\n        };\n    /** Begin animation of snack bar entrance into view. */\n    /**\n     * Begin animation of snack bar entrance into view.\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype.enter = /**\n     * Begin animation of snack bar entrance into view.\n     * @return {?}\n     */\n        function () {\n            if (!this._destroyed) {\n                this._animationState = 'visible';\n                this._changeDetectorRef.detectChanges();\n            }\n        };\n    /** Begin animation of the snack bar exiting from view. */\n    /**\n     * Begin animation of the snack bar exiting from view.\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype.exit = /**\n     * Begin animation of the snack bar exiting from view.\n     * @return {?}\n     */\n        function () {\n            // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n            // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n            // `MatSnackBar.open`).\n            this._animationState = 'hidden';\n            return this._onExit;\n        };\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    /**\n     * Makes sure the exit callbacks have been invoked when the element is destroyed.\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype.ngOnDestroy = /**\n     * Makes sure the exit callbacks have been invoked when the element is destroyed.\n     * @return {?}\n     */\n        function () {\n            this._destroyed = true;\n            this._completeExit();\n        };\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype._completeExit = /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(function () {\n                _this._onExit.next();\n                _this._onExit.complete();\n            });\n        };\n    /**\n     * Applies the various positioning and user-configured CSS classes to the snack bar.\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype._applySnackBarClasses = /**\n     * Applies the various positioning and user-configured CSS classes to the snack bar.\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var element = this._elementRef.nativeElement;\n            /** @type {?} */\n            var panelClasses = this.snackBarConfig.panelClass;\n            if (panelClasses) {\n                if (Array.isArray(panelClasses)) {\n                    // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                    panelClasses.forEach(function (cssClass) { return element.classList.add(cssClass); });\n                }\n                else {\n                    element.classList.add(panelClasses);\n                }\n            }\n            if (this.snackBarConfig.horizontalPosition === 'center') {\n                element.classList.add('mat-snack-bar-center');\n            }\n            if (this.snackBarConfig.verticalPosition === 'top') {\n                element.classList.add('mat-snack-bar-top');\n            }\n        };\n    /**\n     * Asserts that no content is already attached to the container.\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype._assertNotAttached = /**\n     * Asserts that no content is already attached to the container.\n     * @return {?}\n     */\n        function () {\n            if (this._portalOutlet.hasAttached()) {\n                throw Error('Attempting to attach snack bar content after content is already attached');\n            }\n        };\n    return MatSnackBarContainer;\n}(BasePortalOutlet));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar MatSnackBarModule = /** @class */ /*@__PURE__*/ (function () {\n    function MatSnackBarModule() {\n    }\n    return MatSnackBarModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Injection token that can be used to specify default snack bar.\n  @type {?} */\nvar MAT_SNACK_BAR_DEFAULT_OPTIONS = /*@__PURE__*/ new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nvar MatSnackBar = /** @class */ /*@__PURE__*/ (function () {\n    function MatSnackBar(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    Object.defineProperty(MatSnackBar.prototype, \"_openedSnackBarRef\", {\n        /** Reference to the currently opened snackbar at *any* level. */\n        get: /**\n         * Reference to the currently opened snackbar at *any* level.\n         * @return {?}\n         */ function () {\n            /** @type {?} */\n            var parent = this._parentSnackBar;\n            return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (this._parentSnackBar) {\n                this._parentSnackBar._openedSnackBarRef = value;\n            }\n            else {\n                this._snackBarRefAtThisLevel = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @template T\n     * @param {?} component Component to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    MatSnackBar.prototype.openFromComponent = /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @template T\n     * @param {?} component Component to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n        function (component, config) {\n            return /** @type {?} */ (this._attach(component, config));\n        };\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param {?} template Template to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    MatSnackBar.prototype.openFromTemplate = /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param {?} template Template to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n        function (template, config) {\n            return this._attach(template, config);\n        };\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param {?} message The message to show in the snackbar.\n     * @param {?=} action The label for the snackbar action.\n     * @param {?=} config Additional configuration options for the snackbar.\n     * @return {?}\n     */\n    MatSnackBar.prototype.open = /**\n     * Opens a snackbar with a message and an optional action.\n     * @param {?} message The message to show in the snackbar.\n     * @param {?=} action The label for the snackbar action.\n     * @param {?=} config Additional configuration options for the snackbar.\n     * @return {?}\n     */\n        function (message, action, config) {\n            if (action === void 0) {\n                action = '';\n            }\n            /** @type {?} */\n            var _config = __assign({}, this._defaultConfig, config);\n            // Since the user doesn't have access to the component, we can\n            // override the data to pass in our own message and action.\n            _config.data = { message: message, action: action };\n            if (!_config.announcementMessage) {\n                _config.announcementMessage = message;\n            }\n            return this.openFromComponent(SimpleSnackBar, _config);\n        };\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    /**\n     * Dismisses the currently-visible snack bar.\n     * @return {?}\n     */\n    MatSnackBar.prototype.dismiss = /**\n     * Dismisses the currently-visible snack bar.\n     * @return {?}\n     */\n        function () {\n            if (this._openedSnackBarRef) {\n                this._openedSnackBarRef.dismiss();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    MatSnackBar.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            // Only dismiss the snack bar at the current level on destroy.\n            if (this._snackBarRefAtThisLevel) {\n                this._snackBarRefAtThisLevel.dismiss();\n            }\n        };\n    /**\n     * Attaches the snack bar container component to the overlay.\n     * @param {?} overlayRef\n     * @param {?} config\n     * @return {?}\n     */\n    MatSnackBar.prototype._attachSnackBarContainer = /**\n     * Attaches the snack bar container component to the overlay.\n     * @param {?} overlayRef\n     * @param {?} config\n     * @return {?}\n     */\n        function (overlayRef, config) {\n            /** @type {?} */\n            var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n            /** @type {?} */\n            var injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n                [MatSnackBarConfig, config]\n            ]));\n            /** @type {?} */\n            var containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n            /** @type {?} */\n            var containerRef = overlayRef.attach(containerPortal);\n            containerRef.instance.snackBarConfig = config;\n            return containerRef.instance;\n        };\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     * @template T\n     * @param {?} content\n     * @param {?=} userConfig\n     * @return {?}\n     */\n    MatSnackBar.prototype._attach = /**\n     * Places a new component or a template as the content of the snack bar container.\n     * @template T\n     * @param {?} content\n     * @param {?=} userConfig\n     * @return {?}\n     */\n        function (content, userConfig) {\n            /** @type {?} */\n            var config = __assign({}, new MatSnackBarConfig(), this._defaultConfig, userConfig);\n            /** @type {?} */\n            var overlayRef = this._createOverlay(config);\n            /** @type {?} */\n            var container = this._attachSnackBarContainer(overlayRef, config);\n            /** @type {?} */\n            var snackBarRef = new MatSnackBarRef(container, overlayRef);\n            if (content instanceof TemplateRef) {\n                /** @type {?} */\n                var portal = new TemplatePortal(content, /** @type {?} */ ((null)), /** @type {?} */ ({\n                    $implicit: config.data,\n                    snackBarRef: snackBarRef\n                }));\n                snackBarRef.instance = container.attachTemplatePortal(portal);\n            }\n            else {\n                /** @type {?} */\n                var injector = this._createInjector(config, snackBarRef);\n                /** @type {?} */\n                var portal = new ComponentPortal(content, undefined, injector);\n                /** @type {?} */\n                var contentRef = container.attachComponentPortal(portal);\n                // We can't pass this via the injector, because the injector is created earlier.\n                snackBarRef.instance = contentRef.instance;\n            }\n            // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n            // appropriate. This class is applied to the overlay element because the overlay must expand to\n            // fill the width of the screen for full width snackbars.\n            this._breakpointObserver.observe(Breakpoints.Handset).pipe(takeUntil(overlayRef.detachments().pipe(take(1)))).subscribe(function (state$$1) {\n                if (state$$1.matches) {\n                    overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n                }\n                else {\n                    overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n                }\n            });\n            this._animateSnackBar(snackBarRef, config);\n            this._openedSnackBarRef = snackBarRef;\n            return this._openedSnackBarRef;\n        };\n    /**\n     * Animates the old snack bar out and the new one in.\n     * @param {?} snackBarRef\n     * @param {?} config\n     * @return {?}\n     */\n    MatSnackBar.prototype._animateSnackBar = /**\n     * Animates the old snack bar out and the new one in.\n     * @param {?} snackBarRef\n     * @param {?} config\n     * @return {?}\n     */\n        function (snackBarRef, config) {\n            var _this = this;\n            // When the snackbar is dismissed, clear the reference to it.\n            snackBarRef.afterDismissed().subscribe(function () {\n                // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n                if (_this._openedSnackBarRef == snackBarRef) {\n                    _this._openedSnackBarRef = null;\n                }\n            });\n            if (this._openedSnackBarRef) {\n                // If a snack bar is already in view, dismiss it and enter the\n                // new snack bar after exit animation is complete.\n                this._openedSnackBarRef.afterDismissed().subscribe(function () {\n                    snackBarRef.containerInstance.enter();\n                });\n                this._openedSnackBarRef.dismiss();\n            }\n            else {\n                // If no snack bar is in view, enter the new snack bar.\n                snackBarRef.containerInstance.enter();\n            }\n            // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n            if (config.duration && config.duration > 0) {\n                snackBarRef.afterOpened().subscribe(function () { return snackBarRef._dismissAfter(/** @type {?} */ ((config.duration))); });\n            }\n            if (config.announcementMessage) {\n                this._live.announce(config.announcementMessage, config.politeness);\n            }\n        };\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param {?} config The user-specified snack bar config.\n     * @return {?}\n     */\n    MatSnackBar.prototype._createOverlay = /**\n     * Creates a new overlay and places it in the correct location.\n     * @param {?} config The user-specified snack bar config.\n     * @return {?}\n     */\n        function (config) {\n            /** @type {?} */\n            var overlayConfig = new OverlayConfig();\n            overlayConfig.direction = config.direction;\n            /** @type {?} */\n            var positionStrategy = this._overlay.position().global();\n            /** @type {?} */\n            var isRtl = config.direction === 'rtl';\n            /** @type {?} */\n            var isLeft = (config.horizontalPosition === 'left' ||\n                (config.horizontalPosition === 'start' && !isRtl) ||\n                (config.horizontalPosition === 'end' && isRtl));\n            /** @type {?} */\n            var isRight = !isLeft && config.horizontalPosition !== 'center';\n            if (isLeft) {\n                positionStrategy.left('0');\n            }\n            else if (isRight) {\n                positionStrategy.right('0');\n            }\n            else {\n                positionStrategy.centerHorizontally();\n            }\n            // Set horizontal position.\n            if (config.verticalPosition === 'top') {\n                positionStrategy.top('0');\n            }\n            else {\n                positionStrategy.bottom('0');\n            }\n            overlayConfig.positionStrategy = positionStrategy;\n            return this._overlay.create(overlayConfig);\n        };\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @template T\n     * @param {?} config Config that was used to create the snack bar.\n     * @param {?} snackBarRef Reference to the snack bar.\n     * @return {?}\n     */\n    MatSnackBar.prototype._createInjector = /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @template T\n     * @param {?} config Config that was used to create the snack bar.\n     * @param {?} snackBarRef Reference to the snack bar.\n     * @return {?}\n     */\n        function (config, snackBarRef) {\n            /** @type {?} */\n            var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n            return new PortalInjector(userInjector || this._injector, new WeakMap([\n                [MatSnackBarRef, snackBarRef],\n                [MAT_SNACK_BAR_DATA, config.data]\n            ]));\n        };\n    /** @nocollapse */ MatSnackBar.ngInjectableDef = defineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(inject(Overlay), inject(LiveAnnouncer), inject(INJECTOR), inject(BreakpointObserver), inject(MatSnackBar, 12), inject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\n    return MatSnackBar;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nexport { MatSnackBarModule, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MAT_SNACK_BAR_DEFAULT_OPTIONS, MatSnackBar, MatSnackBarContainer, MAT_SNACK_BAR_DATA, MatSnackBarConfig, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n//# sourceMappingURL=snack-bar.es5.js.map\n",null]}