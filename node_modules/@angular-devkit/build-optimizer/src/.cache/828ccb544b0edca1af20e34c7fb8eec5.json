{"remainingRequest":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@agm\\core\\directives\\polygon.js","dependencies":[{"path":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@agm\\core\\directives\\polygon.js","mtime":499162500000},{"path":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { Directive, EventEmitter, Input, Output } from '@angular/core';\nimport { PolygonManager } from '../services/managers/polygon-manager';\n/**\n * AgmPolygon renders a polygon on a {@link AgmMap}\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    agm-map {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polygon [paths]=\"paths\">\n *      </agm-polygon>\n *    </agm-map>\n *  `\n * })\n * export class MyMapCmp {\n *   lat: number = 0;\n *   lng: number = 0;\n *   zoom: number = 10;\n *   paths: Array<LatLngLiteral> = [\n *     { lat: 0,  lng: 10 },\n *     { lat: 0,  lng: 20 },\n *     { lat: 10, lng: 20 },\n *     { lat: 10, lng: 10 },\n *     { lat: 0,  lng: 10 }\n *   ]\n *   // Nesting paths will create a hole where they overlap;\n *   nestedPaths: Array<Array<LatLngLiteral>> = [[\n *     { lat: 0,  lng: 10 },\n *     { lat: 0,  lng: 20 },\n *     { lat: 10, lng: 20 },\n *     { lat: 10, lng: 10 },\n *     { lat: 0,  lng: 10 }\n *   ], [\n *     { lat: 0, lng: 15 },\n *     { lat: 0, lng: 20 },\n *     { lat: 5, lng: 20 },\n *     { lat: 5, lng: 15 },\n *     { lat: 0, lng: 15 }\n *   ]]\n * }\n * ```\n */\nvar AgmPolygon = /** @class */ /*@__PURE__*/ (function () {\n    function AgmPolygon(_polygonManager) {\n        this._polygonManager = _polygonManager;\n        /**\n           * Indicates whether this Polygon handles mouse events. Defaults to true.\n           */\n        this.clickable = true;\n        /**\n           * If set to true, the user can drag this shape over the map. The geodesic\n           * property defines the mode of dragging. Defaults to false.\n           */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = false;\n        /**\n           * If set to true, the user can edit this shape by dragging the control\n           * points shown at the vertices and on each segment. Defaults to false.\n           */\n        this.editable = false;\n        /**\n           * When true, edges of the polygon are interpreted as geodesic and will\n           * follow the curvature of the Earth. When false, edges of the polygon are\n           * rendered as straight lines in screen space. Note that the shape of a\n           * geodesic polygon may appear to change when dragged, as the dimensions\n           * are maintained relative to the surface of the earth. Defaults to false.\n           */\n        this.geodesic = false;\n        /**\n           * The ordered sequence of coordinates that designates a closed loop.\n           * Unlike polylines, a polygon may consist of one or more paths.\n           *  As a result, the paths property may specify one or more arrays of\n           * LatLng coordinates. Paths are closed automatically; do not repeat the\n           * first vertex of the path as the last vertex. Simple polygons may be\n           * defined using a single array of LatLngs. More complex polygons may\n           * specify an array of arrays. Any simple arrays are converted into Arrays.\n           * Inserting or removing LatLngs from the Array will automatically update\n           * the polygon on the map.\n           */\n        this.paths = [];\n        /**\n           * This event is fired when the DOM click event is fired on the Polygon.\n           */\n        this.polyClick = new EventEmitter();\n        /**\n           * This event is fired when the DOM dblclick event is fired on the Polygon.\n           */\n        this.polyDblClick = new EventEmitter();\n        /**\n           * This event is repeatedly fired while the user drags the polygon.\n           */\n        this.polyDrag = new EventEmitter();\n        /**\n           * This event is fired when the user stops dragging the polygon.\n           */\n        this.polyDragEnd = new EventEmitter();\n        /**\n           * This event is fired when the user starts dragging the polygon.\n           */\n        this.polyDragStart = new EventEmitter();\n        /**\n           * This event is fired when the DOM mousedown event is fired on the Polygon.\n           */\n        this.polyMouseDown = new EventEmitter();\n        /**\n           * This event is fired when the DOM mousemove event is fired on the Polygon.\n           */\n        this.polyMouseMove = new EventEmitter();\n        /**\n           * This event is fired on Polygon mouseout.\n           */\n        this.polyMouseOut = new EventEmitter();\n        /**\n           * This event is fired on Polygon mouseover.\n           */\n        this.polyMouseOver = new EventEmitter();\n        /**\n           * This event is fired whe the DOM mouseup event is fired on the Polygon\n           */\n        this.polyMouseUp = new EventEmitter();\n        /**\n           * This even is fired when the Polygon is right-clicked on.\n           */\n        this.polyRightClick = new EventEmitter();\n        this._polygonAddedToManager = false;\n        this._subscriptions = [];\n    }\n    /** @internal */\n    /** @internal */\n    AgmPolygon.prototype.ngAfterContentInit = /** @internal */\n        function () {\n            if (!this._polygonAddedToManager) {\n                this._init();\n            }\n        };\n    AgmPolygon.prototype.ngOnChanges = function (changes) {\n        if (!this._polygonAddedToManager) {\n            this._init();\n            return;\n        }\n        this._polygonManager.setPolygonOptions(this, this._updatePolygonOptions(changes));\n    };\n    AgmPolygon.prototype._init = function () {\n        this._polygonManager.addPolygon(this);\n        this._polygonAddedToManager = true;\n        this._addEventListeners();\n    };\n    AgmPolygon.prototype._addEventListeners = function () {\n        var _this = this;\n        var handlers = [\n            { name: 'click', handler: function (ev) { return _this.polyClick.emit(ev); } },\n            { name: 'dblclick', handler: function (ev) { return _this.polyDblClick.emit(ev); } },\n            { name: 'drag', handler: function (ev) { return _this.polyDrag.emit(ev); } },\n            { name: 'dragend', handler: function (ev) { return _this.polyDragEnd.emit(ev); } },\n            { name: 'dragstart', handler: function (ev) { return _this.polyDragStart.emit(ev); } },\n            { name: 'mousedown', handler: function (ev) { return _this.polyMouseDown.emit(ev); } },\n            { name: 'mousemove', handler: function (ev) { return _this.polyMouseMove.emit(ev); } },\n            { name: 'mouseout', handler: function (ev) { return _this.polyMouseOut.emit(ev); } },\n            { name: 'mouseover', handler: function (ev) { return _this.polyMouseOver.emit(ev); } },\n            { name: 'mouseup', handler: function (ev) { return _this.polyMouseUp.emit(ev); } },\n            { name: 'rightclick', handler: function (ev) { return _this.polyRightClick.emit(ev); } },\n        ];\n        handlers.forEach(function (obj) {\n            var os = _this._polygonManager.createEventObservable(obj.name, _this).subscribe(obj.handler);\n            _this._subscriptions.push(os);\n        });\n    };\n    AgmPolygon.prototype._updatePolygonOptions = function (changes) {\n        return Object.keys(changes)\n            .filter(function (k) { return AgmPolygon._polygonOptionsAttributes.indexOf(k) !== -1; })\n            .reduce(function (obj, k) {\n            obj[k] = changes[k].currentValue;\n            return obj;\n        }, {});\n    };\n    /** @internal */\n    /** @internal */\n    AgmPolygon.prototype.id = /** @internal */\n        function () { return this._id; };\n    /** @internal */\n    /** @internal */\n    AgmPolygon.prototype.ngOnDestroy = /** @internal */\n        function () {\n            this._polygonManager.deletePolygon(this);\n            // unsubscribe all registered observable subscriptions\n            this._subscriptions.forEach(function (s) { return s.unsubscribe(); });\n        };\n    AgmPolygon._polygonOptionsAttributes = [\n        'clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'geodesic', 'icon', 'map',\n        'paths', 'strokeColor', 'strokeOpacity', 'strokeWeight', 'visible', 'zIndex', 'draggable',\n        'editable', 'visible'\n    ];\n    return AgmPolygon;\n}());\nexport { AgmPolygon };\n//# sourceMappingURL=polygon.js.map\n",null]}