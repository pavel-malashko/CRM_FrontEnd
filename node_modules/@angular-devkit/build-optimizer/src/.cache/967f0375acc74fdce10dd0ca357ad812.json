{"remainingRequest":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@agm\\core\\directives\\info-window.js","dependencies":[{"path":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@agm\\core\\directives\\info-window.js","mtime":499162500000},{"path":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { Component, ElementRef, EventEmitter, Output, Input } from '@angular/core';\nimport { InfoWindowManager } from '../services/managers/info-window-manager';\nvar infoWindowId = 0;\n/**\n * AgmInfoWindow renders a info window inside a {@link AgmMarker} or standalone.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *        <agm-info-window [disableAutoPan]=\"true\">\n *          Hi, this is the content of the <strong>info window</strong>\n *        </agm-info-window>\n *      </agm-marker>\n *    </agm-map>\n *  `\n * })\n * ```\n */\nvar AgmInfoWindow = /** @class */ /*@__PURE__*/ (function () {\n    function AgmInfoWindow(_infoWindowManager, _el) {\n        this._infoWindowManager = _infoWindowManager;\n        this._el = _el;\n        /**\n           * Sets the open state for the InfoWindow. You can also call the open() and close() methods.\n           */\n        this.isOpen = false;\n        /**\n           * Emits an event when the info window is closed.\n           */\n        this.infoWindowClose = new EventEmitter();\n        this._infoWindowAddedToManager = false;\n        this._id = (infoWindowId++).toString();\n    }\n    AgmInfoWindow.prototype.ngOnInit = function () {\n        this.content = this._el.nativeElement.querySelector('.agm-info-window-content');\n        this._infoWindowManager.addInfoWindow(this);\n        this._infoWindowAddedToManager = true;\n        this._updateOpenState();\n        this._registerEventListeners();\n    };\n    /** @internal */\n    /** @internal */\n    AgmInfoWindow.prototype.ngOnChanges = /** @internal */\n        function (changes) {\n            if (!this._infoWindowAddedToManager) {\n                return;\n            }\n            if ((changes['latitude'] || changes['longitude']) && typeof this.latitude === 'number' &&\n                typeof this.longitude === 'number') {\n                this._infoWindowManager.setPosition(this);\n            }\n            if (changes['zIndex']) {\n                this._infoWindowManager.setZIndex(this);\n            }\n            if (changes['isOpen']) {\n                this._updateOpenState();\n            }\n            this._setInfoWindowOptions(changes);\n        };\n    AgmInfoWindow.prototype._registerEventListeners = function () {\n        var _this = this;\n        this._infoWindowManager.createEventObservable('closeclick', this).subscribe(function () {\n            _this.isOpen = false;\n            _this.infoWindowClose.emit();\n        });\n    };\n    AgmInfoWindow.prototype._updateOpenState = function () {\n        this.isOpen ? this.open() : this.close();\n    };\n    AgmInfoWindow.prototype._setInfoWindowOptions = function (changes) {\n        var options = {};\n        var optionKeys = Object.keys(changes).filter(function (k) { return AgmInfoWindow._infoWindowOptionsInputs.indexOf(k) !== -1; });\n        optionKeys.forEach(function (k) { options[k] = changes[k].currentValue; });\n        this._infoWindowManager.setOptions(this, options);\n    };\n    /**\n     * Opens the info window.\n     */\n    /**\n       * Opens the info window.\n       */\n    AgmInfoWindow.prototype.open = /**\n       * Opens the info window.\n       */\n        function () { return this._infoWindowManager.open(this); };\n    /**\n     * Closes the info window.\n     */\n    /**\n       * Closes the info window.\n       */\n    AgmInfoWindow.prototype.close = /**\n       * Closes the info window.\n       */\n        function () {\n            var _this = this;\n            return this._infoWindowManager.close(this).then(function () { _this.infoWindowClose.emit(); });\n        };\n    /** @internal */\n    /** @internal */\n    AgmInfoWindow.prototype.id = /** @internal */\n        function () { return this._id; };\n    /** @internal */\n    /** @internal */\n    AgmInfoWindow.prototype.toString = /** @internal */\n        function () { return 'AgmInfoWindow-' + this._id.toString(); };\n    /** @internal */\n    /** @internal */\n    AgmInfoWindow.prototype.ngOnDestroy = /** @internal */\n        function () { this._infoWindowManager.deleteInfoWindow(this); };\n    AgmInfoWindow._infoWindowOptionsInputs = ['disableAutoPan', 'maxWidth'];\n    return AgmInfoWindow;\n}());\nexport { AgmInfoWindow };\n//# sourceMappingURL=info-window.js.map\n",null]}