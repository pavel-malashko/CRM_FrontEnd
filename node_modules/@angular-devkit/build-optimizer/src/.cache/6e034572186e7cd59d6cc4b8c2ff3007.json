{"remainingRequest":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@agm\\core\\services\\managers\\data-layer-manager.js","dependencies":[{"path":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@agm\\core\\services\\managers\\data-layer-manager.js","mtime":499162500000},{"path":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { Injectable, NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { GoogleMapsAPIWrapper } from './../google-maps-api-wrapper';\n/**\n * Manages all Data Layers for a Google Map instance.\n */\nvar DataLayerManager = /** @class */ /*@__PURE__*/ (function () {\n    function DataLayerManager(_wrapper, _zone) {\n        this._wrapper = _wrapper;\n        this._zone = _zone;\n        this._layers = new Map();\n    }\n    /**\n     * Adds a new Data Layer to the map.\n     */\n    /**\n       * Adds a new Data Layer to the map.\n       */\n    DataLayerManager.prototype.addDataLayer = /**\n       * Adds a new Data Layer to the map.\n       */\n        function (layer) {\n            var _this = this;\n            var newLayer = this._wrapper.createDataLayer({\n                style: layer.style\n            })\n                .then(function (d) {\n                if (layer.geoJson) {\n                    _this.getDataFeatures(d, layer.geoJson).then(function (features) { return d.features = features; });\n                }\n                return d;\n            });\n            this._layers.set(layer, newLayer);\n        };\n    DataLayerManager.prototype.deleteDataLayer = function (layer) {\n        var _this = this;\n        this._layers.get(layer).then(function (l) {\n            l.setMap(null);\n            _this._layers.delete(layer);\n        });\n    };\n    DataLayerManager.prototype.updateGeoJson = function (layer, geoJson) {\n        var _this = this;\n        this._layers.get(layer).then(function (l) {\n            l.forEach(function (feature) {\n                l.remove(feature);\n                var index = l.features.indexOf(feature, 0);\n                if (index > -1) {\n                    l.features.splice(index, 1);\n                }\n            });\n            _this.getDataFeatures(l, geoJson).then(function (features) { return l.features = features; });\n        });\n    };\n    DataLayerManager.prototype.setDataOptions = function (layer, options) {\n        this._layers.get(layer).then(function (l) {\n            l.setControlPosition(options.controlPosition);\n            l.setControls(options.controls);\n            l.setDrawingMode(options.drawingMode);\n            l.setStyle(options.style);\n        });\n    };\n    /**\n     * Creates a Google Maps event listener for the given DataLayer as an Observable\n     */\n    /**\n       * Creates a Google Maps event listener for the given DataLayer as an Observable\n       */\n    DataLayerManager.prototype.createEventObservable = /**\n       * Creates a Google Maps event listener for the given DataLayer as an Observable\n       */\n        function (eventName, layer) {\n            var _this = this;\n            return new Observable(function (observer) {\n                _this._layers.get(layer).then(function (d) {\n                    d.addListener(eventName, function (e) { return _this._zone.run(function () { return observer.next(e); }); });\n                });\n            });\n        };\n    /**\n     * Extract features from a geoJson using google.maps Data Class\n     * @param d : google.maps.Data class instance\n     * @param geoJson : url or geojson object\n     */\n    /**\n       * Extract features from a geoJson using google.maps Data Class\n       * @param d : google.maps.Data class instance\n       * @param geoJson : url or geojson object\n       */\n    DataLayerManager.prototype.getDataFeatures = /**\n       * Extract features from a geoJson using google.maps Data Class\n       * @param d : google.maps.Data class instance\n       * @param geoJson : url or geojson object\n       */\n        function (d, geoJson) {\n            return new Promise(function (resolve, reject) {\n                if (typeof geoJson === 'object') {\n                    try {\n                        var features = d.addGeoJson(geoJson);\n                        resolve(features);\n                    }\n                    catch (e) {\n                        reject(e);\n                    }\n                }\n                else if (typeof geoJson === 'string') {\n                    d.loadGeoJson(geoJson, null, resolve);\n                }\n                else {\n                    reject(\"Impossible to extract features from geoJson: wrong argument type\");\n                }\n            });\n        };\n    return DataLayerManager;\n}());\nexport { DataLayerManager };\n//# sourceMappingURL=data-layer-manager.js.map\n",null]}