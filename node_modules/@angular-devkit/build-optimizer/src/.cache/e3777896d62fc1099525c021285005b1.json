{"remainingRequest":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@angular\\material\\esm5\\tree.es5.js","dependencies":[{"path":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@angular\\material\\esm5\\tree.es5.js","mtime":499162500000},{"path":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** PURE_IMPORTS_START _angular_core,tslib,_angular_cdk_tree,_angular_material_core,_angular_common,_angular_cdk_collections,rxjs,rxjs_operators PURE_IMPORTS_END */\nimport { Directive, ViewContainerRef, Attribute, ContentChildren, ElementRef, Input, IterableDiffers, ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { __extends } from 'tslib';\nimport { CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport { mixinDisabled, mixinTabIndex, MatCommonModule } from '@angular/material/core';\nimport { CommonModule } from '@angular/common';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nvar MatTreeNodeOutlet = /** @class */ /*@__PURE__*/ (function () {\n    function MatTreeNodeOutlet(viewContainer) {\n        this.viewContainer = viewContainer;\n    }\n    return MatTreeNodeOutlet;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar _MatTreeNodeMixinBase = /*@__PURE__*/ mixinTabIndex(/*@__PURE__*/ mixinDisabled(CdkTreeNode));\n/** @type {?} */\nvar _MatNestedTreeNodeMixinBase = /*@__PURE__*/ mixinTabIndex(/*@__PURE__*/ mixinDisabled(CdkNestedTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n * @template T\n */\nvar MatTreeNode = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(MatTreeNode, _super);\n    function MatTreeNode(_elementRef, _tree, tabIndex) {\n        var _this = _super.call(this, _elementRef, _tree) || this;\n        _this._elementRef = _elementRef;\n        _this._tree = _tree;\n        _this.role = 'treeitem';\n        _this.tabIndex = Number(tabIndex) || 0;\n        return _this;\n    }\n    return MatTreeNode;\n}(_MatTreeNodeMixinBase));\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * @template T\n */\nvar MatTreeNodeDef = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(MatTreeNodeDef, _super);\n    function MatTreeNodeDef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MatTreeNodeDef;\n}(CdkTreeNodeDef));\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n( /** @type {?} */(MatTreeNodeDef))['ctorParameters'] = function () { return ( /** @type {?} */(CdkTreeNodeDef))['ctorParameters']; };\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n * @template T\n */\nvar MatNestedTreeNode = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(MatNestedTreeNode, _super);\n    function MatNestedTreeNode(_elementRef, _tree, _differs, tabIndex) {\n        var _this = _super.call(this, _elementRef, _tree, _differs) || this;\n        _this._elementRef = _elementRef;\n        _this._tree = _tree;\n        _this._differs = _differs;\n        _this.tabIndex = Number(tabIndex) || 0;\n        return _this;\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n    /**\n     * @return {?}\n     */\n    MatNestedTreeNode.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n        function () {\n            _super.prototype.ngAfterContentInit.call(this);\n        };\n    /**\n     * @return {?}\n     */\n    MatNestedTreeNode.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            _super.prototype.ngOnDestroy.call(this);\n        };\n    return MatNestedTreeNode;\n}(_MatNestedTreeNodeMixinBase));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n * @template T\n */\nvar MatTreeNodePadding = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(MatTreeNodePadding, _super);\n    function MatTreeNodePadding() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MatTreeNodePadding;\n}(CdkTreeNodePadding));\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n( /** @type {?} */(MatTreeNodePadding))['ctorParameters'] = function () {\n    return ( /** @type {?} */(CdkTreeNodePadding))['ctorParameters'];\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @template T\n */\nvar MatTree = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(MatTree, _super);\n    function MatTree() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MatTree;\n}(CdkTree));\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n( /** @type {?} */(MatTree))['ctorParameters'] = function () { return ( /** @type {?} */(CdkTree))['ctorParameters']; };\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n * @template T\n */\nvar MatTreeNodeToggle = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(MatTreeNodeToggle, _super);\n    function MatTreeNodeToggle() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.recursive = false;\n        return _this;\n    }\n    return MatTreeNodeToggle;\n}(CdkTreeNodeToggle));\n// TODO(devversion): workaround for https://github.com/angular/material2/issues/12760\n( /** @type {?} */(MatTreeNodeToggle))['ctorParameters'] = function () { return ( /** @type {?} */(CdkTreeNodeToggle))['ctorParameters']; };\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar MAT_TREE_DIRECTIVES = [\n    MatNestedTreeNode,\n    MatTreeNodeDef,\n    MatTreeNodePadding,\n    MatTreeNodeToggle,\n    MatTree,\n    MatTreeNode,\n    MatTreeNodeOutlet\n];\nvar MatTreeModule = /** @class */ /*@__PURE__*/ (function () {\n    function MatTreeModule() {\n    }\n    return MatTreeModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n * @template T, F\n */\nvar /**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n * @template T, F\n */ MatTreeFlattener = /** @class */ /*@__PURE__*/ (function () {\n    function MatTreeFlattener(transformFunction, getLevel, isExpandable, getChildren) {\n        this.transformFunction = transformFunction;\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.getChildren = getChildren;\n    }\n    /**\n     * @param {?} node\n     * @param {?} level\n     * @param {?} resultNodes\n     * @param {?} parentMap\n     * @return {?}\n     */\n    MatTreeFlattener.prototype._flattenNode = /**\n     * @param {?} node\n     * @param {?} level\n     * @param {?} resultNodes\n     * @param {?} parentMap\n     * @return {?}\n     */\n        function (node, level, resultNodes, parentMap) {\n            var _this = this;\n            /** @type {?} */\n            var flatNode = this.transformFunction(node, level);\n            resultNodes.push(flatNode);\n            if (this.isExpandable(flatNode)) {\n                /** @type {?} */\n                var childrenNodes = this.getChildren(node);\n                if (Array.isArray(childrenNodes)) {\n                    this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n                }\n                else {\n                    childrenNodes.pipe(take(1)).subscribe(function (children) {\n                        _this._flattenChildren(children, level, resultNodes, parentMap);\n                    });\n                }\n            }\n            return resultNodes;\n        };\n    /**\n     * @param {?} children\n     * @param {?} level\n     * @param {?} resultNodes\n     * @param {?} parentMap\n     * @return {?}\n     */\n    MatTreeFlattener.prototype._flattenChildren = /**\n     * @param {?} children\n     * @param {?} level\n     * @param {?} resultNodes\n     * @param {?} parentMap\n     * @return {?}\n     */\n        function (children, level, resultNodes, parentMap) {\n            var _this = this;\n            children.forEach(function (child, index) {\n                /** @type {?} */\n                var childParentMap = parentMap.slice();\n                childParentMap.push(index != children.length - 1);\n                _this._flattenNode(child, level + 1, resultNodes, childParentMap);\n            });\n        };\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     * @param {?} structuredData\n     * @return {?}\n     */\n    MatTreeFlattener.prototype.flattenNodes = /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     * @param {?} structuredData\n     * @return {?}\n     */\n        function (structuredData) {\n            var _this = this;\n            /** @type {?} */\n            var resultNodes = [];\n            structuredData.forEach(function (node) { return _this._flattenNode(node, 0, resultNodes, []); });\n            return resultNodes;\n        };\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     * @param {?} nodes\n     * @param {?} treeControl\n     * @return {?}\n     */\n    MatTreeFlattener.prototype.expandFlattenedNodes = /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     * @param {?} nodes\n     * @param {?} treeControl\n     * @return {?}\n     */\n        function (nodes, treeControl) {\n            var _this = this;\n            /** @type {?} */\n            var results = [];\n            /** @type {?} */\n            var currentExpand = [];\n            currentExpand[0] = true;\n            nodes.forEach(function (node) {\n                /** @type {?} */\n                var expand = true;\n                for (var i = 0; i <= _this.getLevel(node); i++) {\n                    expand = expand && currentExpand[i];\n                }\n                if (expand) {\n                    results.push(node);\n                }\n                if (_this.isExpandable(node)) {\n                    currentExpand[_this.getLevel(node) + 1] = treeControl.isExpanded(node);\n                }\n            });\n            return results;\n        };\n    return MatTreeFlattener;\n}());\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n * @template T, F\n */\nvar /**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n * @template T, F\n */ MatTreeFlatDataSource = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(MatTreeFlatDataSource, _super);\n    function MatTreeFlatDataSource(treeControl, treeFlattener, initialData) {\n        if (initialData === void 0) {\n            initialData = [];\n        }\n        var _this = _super.call(this) || this;\n        _this.treeControl = treeControl;\n        _this.treeFlattener = treeFlattener;\n        _this._flattenedData = new BehaviorSubject([]);\n        _this._expandedData = new BehaviorSubject([]);\n        _this._data = new BehaviorSubject(initialData);\n        return _this;\n    }\n    Object.defineProperty(MatTreeFlatDataSource.prototype, \"data\", {\n        get: /**\n         * @return {?}\n         */ function () { return this._data.value; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._data.next(value);\n            this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n            this.treeControl.dataNodes = this._flattenedData.value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} collectionViewer\n     * @return {?}\n     */\n    MatTreeFlatDataSource.prototype.connect = /**\n     * @param {?} collectionViewer\n     * @return {?}\n     */\n        function (collectionViewer) {\n            var _this = this;\n            /** @type {?} */\n            var changes = [\n                collectionViewer.viewChange,\n                this.treeControl.expansionModel.onChange,\n                this._flattenedData\n            ];\n            return merge.apply(void 0, changes).pipe(map(function () {\n                _this._expandedData.next(_this.treeFlattener.expandFlattenedNodes(_this._flattenedData.value, _this.treeControl));\n                return _this._expandedData.value;\n            }));\n        };\n    /**\n     * @return {?}\n     */\n    MatTreeFlatDataSource.prototype.disconnect = /**\n     * @return {?}\n     */\n        function () {\n            // no op\n        };\n    return MatTreeFlatDataSource;\n}(DataSource));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n * @template T\n */\nvar /**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n * @template T\n */ MatTreeNestedDataSource = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(MatTreeNestedDataSource, _super);\n    function MatTreeNestedDataSource() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._data = new BehaviorSubject([]);\n        return _this;\n    }\n    Object.defineProperty(MatTreeNestedDataSource.prototype, \"data\", {\n        /**\n         * Data for the nested tree\n         */\n        get: /**\n         * Data for the nested tree\n         * @return {?}\n         */ function () { return this._data.value; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) { this._data.next(value); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} collectionViewer\n     * @return {?}\n     */\n    MatTreeNestedDataSource.prototype.connect = /**\n     * @param {?} collectionViewer\n     * @return {?}\n     */\n        function (collectionViewer) {\n            var _this = this;\n            return merge.apply(void 0, [collectionViewer.viewChange, this._data]).pipe(map(function () {\n                return _this.data;\n            }));\n        };\n    /**\n     * @return {?}\n     */\n    MatTreeNestedDataSource.prototype.disconnect = /**\n     * @return {?}\n     */\n        function () {\n            // no op\n        };\n    return MatTreeNestedDataSource;\n}(DataSource));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nexport { _MatTreeNodeMixinBase, _MatNestedTreeNodeMixinBase, MatTreeNode, MatTreeNodeDef, MatNestedTreeNode, MatTreeNodePadding, MatTree, MatTreeModule, MatTreeNodeToggle, MatTreeNodeOutlet, MatTreeFlattener, MatTreeFlatDataSource, MatTreeNestedDataSource };\n//# sourceMappingURL=tree.es5.js.map\n",null]}