{"remainingRequest":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@agm\\core\\services\\managers\\rectangle-manager.js","dependencies":[{"path":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@agm\\core\\services\\managers\\rectangle-manager.js","mtime":499162500000},{"path":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Chief Accountant\\Desktop\\frontPTS\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { Injectable, NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { GoogleMapsAPIWrapper } from '../google-maps-api-wrapper';\nvar RectangleManager = /** @class */ /*@__PURE__*/ (function () {\n    function RectangleManager(_apiWrapper, _zone) {\n        this._apiWrapper = _apiWrapper;\n        this._zone = _zone;\n        this._rectangles = new Map();\n    }\n    RectangleManager.prototype.addRectangle = function (rectangle) {\n        this._rectangles.set(rectangle, this._apiWrapper.createRectangle({\n            bounds: {\n                north: rectangle.north,\n                east: rectangle.east,\n                south: rectangle.south,\n                west: rectangle.west\n            },\n            clickable: rectangle.clickable,\n            draggable: rectangle.draggable,\n            editable: rectangle.editable,\n            fillColor: rectangle.fillColor,\n            fillOpacity: rectangle.fillOpacity,\n            strokeColor: rectangle.strokeColor,\n            strokeOpacity: rectangle.strokeOpacity,\n            strokePosition: rectangle.strokePosition,\n            strokeWeight: rectangle.strokeWeight,\n            visible: rectangle.visible,\n            zIndex: rectangle.zIndex\n        }));\n    };\n    /**\n     * Removes the given rectangle from the map.\n     */\n    /**\n       * Removes the given rectangle from the map.\n       */\n    RectangleManager.prototype.removeRectangle = /**\n       * Removes the given rectangle from the map.\n       */\n        function (rectangle) {\n            var _this = this;\n            return this._rectangles.get(rectangle).then(function (r) {\n                r.setMap(null);\n                _this._rectangles.delete(rectangle);\n            });\n        };\n    RectangleManager.prototype.setOptions = function (rectangle, options) {\n        return this._rectangles.get(rectangle).then(function (r) { return r.setOptions(options); });\n    };\n    RectangleManager.prototype.getBounds = function (rectangle) {\n        return this._rectangles.get(rectangle).then(function (r) { return r.getBounds(); });\n    };\n    RectangleManager.prototype.setBounds = function (rectangle) {\n        return this._rectangles.get(rectangle).then(function (r) {\n            return r.setBounds({\n                north: rectangle.north,\n                east: rectangle.east,\n                south: rectangle.south,\n                west: rectangle.west\n            });\n        });\n    };\n    RectangleManager.prototype.setEditable = function (rectangle) {\n        return this._rectangles.get(rectangle).then(function (r) {\n            return r.setEditable(rectangle.editable);\n        });\n    };\n    RectangleManager.prototype.setDraggable = function (rectangle) {\n        return this._rectangles.get(rectangle).then(function (r) {\n            return r.setDraggable(rectangle.draggable);\n        });\n    };\n    RectangleManager.prototype.setVisible = function (rectangle) {\n        return this._rectangles.get(rectangle).then(function (r) {\n            return r.setVisible(rectangle.visible);\n        });\n    };\n    RectangleManager.prototype.createEventObservable = function (eventName, rectangle) {\n        var _this = this;\n        return Observable.create(function (observer) {\n            var listener = null;\n            _this._rectangles.get(rectangle).then(function (r) {\n                listener = r.addListener(eventName, function (e) { return _this._zone.run(function () { return observer.next(e); }); });\n            });\n            return function () {\n                if (listener !== null) {\n                    listener.remove();\n                }\n            };\n        });\n    };\n    return RectangleManager;\n}());\nexport { RectangleManager };\n//# sourceMappingURL=rectangle-manager.js.map\n",null]}